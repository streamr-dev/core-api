{
  "swagger": "2.0",
  "info": {
    "title": "Streamr API",
    "version": "2.0.0"
  },
  "host": "streamr.network",
  "schemes": [
    "https"
  ],
  "basePath": "/api/v2",
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "token": []
    }
  ],
  "tags": [
    {
      "name": "categories",
      "description": "Product categories"
    },
    {
      "name": "dataunions",
      "description": "Data Unions"
    },
    {
      "name": "login",
      "description": "Methods for obtaining a session token for authentication"
    },
    {
      "name": "permissions",
      "description": "Read, write, and share rights"
    },
    {
      "name": "products",
      "description": "Products sold on a marketplace containing Streams"
    },
    {
      "name": "subscriptions",
      "description": "Subscriptions for Products purchased on the marketplace"
    },
    {
      "name": "users",
      "description": "User management"
    }
  ],
  "paths": {
    "/dataunions/{contractAddress}/joinRequests": {
      "get": {
        "summary": "List all join requests",
        "description": "List all join requests for this data union.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "enum": [
              "pending",
              "accepted",
              "rejected"
            ],
            "description": "Filter listing by state of the join request",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameter missing"
          }
        }
      },
      "post": {
        "summary": "Create join request",
        "description": "Create data union join request from given json body",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Data union join request details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDataUnionJoinRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "403": {
            "description": "Given secret is incorrect"
          },
          "404": {
            "description": "Member address is not owned by the current user"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/joinRequests/{joinRequestId}": {
      "get": {
        "summary": "Find join request by id",
        "description": "Find data union join request by join request id.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "joinRequestId",
            "in": "path",
            "description": "ID of the join request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Join request not found by id"
          }
        }
      },
      "put": {
        "summary": "Update join request state",
        "description": "Update state attribute of the join request.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "joinRequestId",
            "in": "path",
            "description": "ID of the join request",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Data union join request state",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDataUnionJoinRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Join request not found by id"
          }
        }
      },
      "delete": {
        "summary": "Delete join request",
        "description": "Delete data union join request.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "joinRequestId",
            "in": "path",
            "description": "ID of the join request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Join request not found by id"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/secrets": {
      "get": {
        "summary": "List all data union secrets",
        "description": "List all secrets for this data union.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          }
        }
      },
      "post": {
        "summary": "Create secret",
        "description": "Create data union secret",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Create data union secret details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDataUnionSecret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DataUnionSecret"
            }
          },
          "400": {
            "description": "Required parameters missing"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/secrets/{dataUnionSecretId}": {
      "get": {
        "summary": "Find secret by id",
        "description": "Find data union secret by id.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataUnionSecretId",
            "in": "path",
            "description": "ID of the data union secret",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DataUnionSecret"
            }
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Secret not found"
          }
        }
      },
      "put": {
        "summary": "Update secret",
        "description": "Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataUnionSecretId",
            "in": "path",
            "description": "ID of the secret",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated data union secret details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Renamed passphrase",
                  "description": "Name of the secret"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DataUnionSecret"
            }
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Secret not found"
          }
        }
      },
      "delete": {
        "summary": "Delete secret",
        "description": "Delete data union secret.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataUnionSecretId",
            "in": "path",
            "description": "ID of the secret",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Secret not found by id"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/stats": {
      "get": {
        "summary": "Proxy calls to to data union server",
        "description": "Return data union stats",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Stats not found by data union address"
          },
          "500": {
            "description": "Data union server is not responding"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/members": {
      "get": {
        "summary": "Proxy calls to to data union server",
        "description": "Return a list of members",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Stats not found by data union address"
          },
          "500": {
            "description": "Data union server is not responding"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/members/{memberAddress}": {
      "get": {
        "summary": "Proxy calls to to data union server",
        "description": "Return stats for individual members",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberAddress",
            "in": "path",
            "description": "Ethereum address of the member",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Stats not found by data union or member address"
          },
          "500": {
            "description": "Data union server is not responding"
          }
        }
      }
    },
    "/login/challenge/{address}": {
      "post": {
        "summary": "Generate challenge",
        "description": "Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.",
        "tags": [
          "login"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "description": "Public Ethereum address of the account for signature verification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A challenge and its expiration",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          }
        }
      }
    },
    "/login/response": {
      "post": {
        "summary": "Log in with challenge verification",
        "description": "Verifies a signature against a challenge. If it matches, generates a session token for the user.",
        "tags": [
          "login"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Challenge response",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A session token and its expiration",
            "schema": {
              "$ref": "#/definitions/SessionToken"
            }
          },
          "400": {
            "description": "Challenge-based login failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_CHALLENGE",
                "message": "Challenge-based login failed"
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "List categories",
        "description": "Lists all categories in alphabetical order.",
        "tags": [
          "categories"
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "An array of categories",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "List products",
        "description": "Lists products according to provided parameters.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "name": "search",
            "type": "string",
            "in": "query",
            "description": "Filter by search term in name or description",
            "required": false
          },
          {
            "name": "sortBy",
            "type": "string",
            "in": "query",
            "description": "Sort the returned results by the given field.",
            "required": false,
            "default": "id"
          },
          {
            "name": "order",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "description": "Control whether the results are sorted in ascending or descending order. Used with parameter `sortBy`.",
            "required": false,
            "default": "asc"
          },
          {
            "name": "max",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of returned results (capped at 100)",
            "required": false,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "Skip the first (offset) results. Used together with max for paging.",
            "required": false,
            "default": 0
          },
          {
            "name": "grantedAccess",
            "type": "boolean",
            "in": "query",
            "description": "If false, excludes resources that user has been granted specific permission to from results.",
            "required": false,
            "default": true
          },
          {
            "name": "publicAccess",
            "type": "boolean",
            "in": "query",
            "description": "If true, includes publicly available resources in the results.",
            "required": false,
            "default": false
          },
          {
            "name": "operation",
            "type": "string",
            "enum": [
              "stream_get",
              "stream_edit",
              "stream_delete",
              "stream_publish",
              "stream_subscribe",
              "stream_share",
              "product_get",
              "product_edit",
              "product_delete",
              "product_share"
            ],
            "in": "query",
            "description": "Filter results by Permission (access level)",
            "required": false,
            "default": "product_get"
          },
          {
            "name": "categories",
            "type": "string",
            "in": "query",
            "description": "Filter products by category id(s)",
            "required": false
          },
          {
            "name": "states",
            "type": "string",
            "in": "query",
            "description": "Filter products by state(s)",
            "required": false,
            "enum": [
              "NOT_DEPLOYED",
              "DEPLOYING",
              "DEPLOYED",
              "UNDEPLOYING"
            ]
          },
          {
            "name": "minPrice",
            "type": "number",
            "in": "query",
            "description": "Minimum price (per second) of product",
            "required": false
          },
          {
            "name": "maxPrice",
            "type": "number",
            "in": "query",
            "description": "Maximum price (per second) of product",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Product",
        "description": "Creates a new Product with state `NOT_DEPLOYED`.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "description": "Product object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to a included `Stream` (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "me@streamr.network does not have permission to share Stream (id bqO9tp3wQVCPbKh6elAFLw)"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Invalid category: foo (typeMismatch)"
              }
            }
          }
        }
      }
    },
    "/users/me/products": {
      "get": {
        "summary": "List my products",
        "description": "Lists products that current user has product_share permission on",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "name": "search",
            "type": "string",
            "in": "query",
            "description": "Filter by search term in name or description",
            "required": false
          },
          {
            "name": "sortBy",
            "type": "string",
            "in": "query",
            "description": "Sort the returned results by the given field.",
            "required": false,
            "default": "id"
          },
          {
            "name": "order",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "description": "Control whether the results are sorted in ascending or descending order. Used with parameter `sortBy`.",
            "required": false,
            "default": "asc"
          },
          {
            "name": "max",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of returned results (capped at 100)",
            "required": false,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "Skip the first (offset) results. Used together with max for paging.",
            "required": false,
            "default": 0
          },
          {
            "name": "grantedAccess",
            "type": "boolean",
            "in": "query",
            "description": "If false, excludes resources that user has been granted specific permission to from results.",
            "required": false,
            "default": true
          },
          {
            "name": "publicAccess",
            "type": "boolean",
            "in": "query",
            "description": "If true, includes publicly available resources in the results.",
            "required": false,
            "default": false
          },
          {
            "name": "categories",
            "type": "string",
            "in": "query",
            "description": "Filter products by category id(s)",
            "required": false
          },
          {
            "name": "states",
            "type": "string",
            "in": "query",
            "description": "Filter products by state(s)",
            "required": false,
            "enum": [
              "NOT_DEPLOYED",
              "DEPLOYING",
              "DEPLOYED",
              "UNDEPLOYING"
            ]
          },
          {
            "name": "minPrice",
            "type": "number",
            "in": "query",
            "description": "Minimum price (per second) of product",
            "required": false
          },
          {
            "name": "maxPrice",
            "type": "number",
            "in": "query",
            "description": "Maximum price (per second) of product",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "summary": "Get a Product",
        "description": "Get a Product by id",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "403": {
            "description": "Insufficient permission to read Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to read Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Product",
        "description": "Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated Product. When performing on a paid Product with state `DEPLOYED` or a free Product, can leave out fields `ownerAddress`, `beneficiaryAddress`, `pricePerSecond`, `priceCurrency`, and `minimumSubscriptionInSeconds` since they are ignored anyway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to write Product or include Stream (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to write Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Invalid category: foo (typeMismatch)"
              }
            }
          }
        }
      }
    },
    "/products/{id}/streams": {
      "get": {
        "summary": "Get Streams of Product",
        "description": "Get all the Streams of a Product",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Streams",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Stream"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to read Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to read Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          }
        }
      }
    },
    "/products/{id}/streams/{streamId}": {
      "put": {
        "summary": "Add Stream to Product",
        "description": "Add a Stream to a Product",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "unique identifier of a Stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully added"
          },
          "403": {
            "description": "Insufficient permission to write Product or to share Stream (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to read Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product or Stream not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Stream from Product",
        "description": "Remove a Stream from a Product",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "unique identifier of a Stream",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed"
          },
          "403": {
            "description": "Insufficient permission to write Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to read Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product or Stream not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setDeploying": {
      "post": {
        "summary": "Transition Product to state DEPLOYING",
        "description": "Inform core-api that a Product has moved from state `NOT_DEPLOYED` to `DEPLOYING`. Should be called after transaction to submit product to marketplace has been sent to Ethereum.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`DEPLOYING`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to write Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to write Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition UNDEPLOYING -> DEPLOYING"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setDeployed": {
      "post": {
        "summary": "Transition Product to state DEPLOYED",
        "description": "Idempotent operation that informs core-api that a Product has moved from state `NOT_DEPLOYED` / `DEPLOYING` to `DEPLOYED`. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Deployed product and transaction block number information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeployedProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`DEPLOYED`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "User does not have DevOps privilege (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "DevOps role required"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition UNDEPLOYING -> DEPLOYED"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Invalid blockNumber: foo (nullable)"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setUndeploying": {
      "post": {
        "summary": "Transition Product to state UNDEPLOYING",
        "description": "Inform core-api that a Product has moved from state `DEPLOYED` to `UNDEPLOYING`. Should be called after transaction to remove product from marketplace has been sent to Ethereum.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`UNDEPLOYING`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to write Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to write Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition NOT_DEPLOYED -> UNDEPLOYING"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setUndeployed": {
      "post": {
        "summary": "Transition Product to state NOT_DEPLOYED",
        "description": "Idempotent operation that informs core-api that a Product has moved from state `DEPLOYED` / `UNDEPLOYING` to `NOT_DEPLOYED`. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Transaction block number information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UndeployedProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`NOT_DEPLOYED`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "User does not have DevOps privilege (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "DevOps role required"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition DEPLOYING -> NOT_DEPLOYED"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Invalid blockNumber: foo (nullable)"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setPricing": {
      "post": {
        "summary": "Update Product pricing data",
        "description": "Idempotent operation that sets Product's pricing details (basically stuff held in smart contract).",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated product info and transaction block number",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeployedProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated product",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "User does not have DevOps privilege (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "DevOps role required"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Invalid blockNumber: foo (nullable)"
              }
            }
          }
        }
      }
    },
    "/products/{id}/deployFree": {
      "post": {
        "summary": "Deploy free Product",
        "description": "Deploy a free Product (price = 0) so that it is publicly viewable and purchasable. Its streams are made public as well.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`DEPLOYED`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to share Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to share Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition DEPLOYED -> DEPLOYED"
              }
            }
          }
        }
      }
    },
    "/products/{id}/undeployFree": {
      "post": {
        "summary": "Undeploy free Product",
        "description": "Undeploy a free Product (price = 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`NOT_DEPLOYED`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to share Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to share Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition NOT_DEPLOYED -> NOT_DEPLOYED"
              }
            }
          }
        }
      }
    },
    "/products/{id}/images": {
      "post": {
        "summary": "Attach image to Product",
        "description": "Upload and attach an image to a Product. Supported formats: JPG or PNG.",
        "tags": [
          "products"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "description": "Image file. JPG or PNG."
          }
        ],
        "responses": {
          "200": {
            "description": "Product with imageUrl updated",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Parameter 'file' missing or unexepcted image dimensions",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "UNEXPECTED_IMAGE_DIMENSIONS",
                "message": ""
              }
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to write Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to write Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "413": {
            "description": "Uploaded file too large",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FILE_TOO_LARGE",
                "message": "File size was 20000000 bytes (> 10000000 bytes)"
              }
            }
          },
          "415": {
            "description": "File type not supported. (Not an image or unrecognized)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "UNSUPPORTED_FILE_TYPE",
                "message": "File type is not a recognized image format"
              }
            }
          }
        }
      }
    },
    "/products/{id}/permissions": {
      "get": {
        "summary": "List permissions",
        "description": "Lists the permissions to given Product.\n Requires 'grant' permission or ownership.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "streams",
          "permissions"
        ],
        "responses": {
          "200": {
            "description": "An array of permission objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            }
          },
          "403": {
            "description": "No sharing rights to the stream",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Stream wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Grant permission",
        "description": "Grant a new permission to given Product.\n Requires 'grant' permission or ownership.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Requested permission (id ignored)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          }
        ],
        "tags": [
          "streams",
          "permissions"
        ],
        "responses": {
          "200": {
            "description": "New stream permission object that was created",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          "403": {
            "description": "No sharing rights to the stream",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Stream wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/products/{id}/permissions/{pid}": {
      "get": {
        "summary": "Get single permission object",
        "description": "Returns one product-user-operation relationship object by its unique id. \n Requires 'grant' permission or ownership.",
        "tags": [
          "streams",
          "permissions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pid",
            "description": "ID of the permission to be fetched",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          "403": {
            "description": "No sharing rights to the stream",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Stream or permission object wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a product permission",
        "description": "Deletes a Product permission by id.\n Requires 'grant' permission or ownership.",
        "tags": [
          "streams",
          "permissions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pid",
            "description": "ID of the permission to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success (no content)"
          },
          "403": {
            "description": "No sharing rights to the stream",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Stream or permission wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/products/remove/{username}": {
      "delete": {
        "summary": "Remove troll users products",
        "description": "Removes users all products. Undo is not supported. Admin role is required.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "Username of the product owner",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Product's removed'",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Username is missing from the request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "Fetch subscriptions of user",
        "description": "Fetch a list of all the subscriptions of the authenticated user",
        "tags": [
          "subscriptions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "an array of subscriptions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Purchase free Product / Inform core-api of Product purchase",
        "description": "If not given field 'address', assumes user is purchasing a *free Product*. If field 'address' is given, is an idempotent operation that informs core-api that a *paid Product* has been purchased and is called by Marketplace Watcher. In both cases creates or updates an existing Subscription and related Permissions.",
        "tags": [
          "subscriptions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Information about Product purchase",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSubscription"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "User does not have DevOps privilege (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "DevOps role required"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Invalid address: foo"
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get the authenticated user",
        "description": "Returns information on the authenticated user.",
        "parameters": [],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user profile",
        "description": "Updates user's profile.",
        "parameters": [],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "summary": "Delete user's profile",
        "description": "Delete user's profile.",
        "parameters": [],
        "tags": [
          "users"
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      }
    },
    "/users/me/image": {
      "post": {
        "summary": "Upload user's avatar image",
        "description": "Upload user's avatar image for the authenticated user.",
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "description": "Image file. JPG or PNG."
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Parameter 'file' missing or unexepcted image dimensions",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "UNEXPECTED_IMAGE_DIMENSIONS",
                "message": ""
              }
            }
          },
          "413": {
            "description": "Uploaded file too large",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FILE_TOO_LARGE",
                "message": "File size was 20000000 bytes (> 10000000 bytes)"
              }
            }
          },
          "415": {
            "description": "File type not supported. (Not an image or unrecognized)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "UNSUPPORTED_FILE_TYPE",
                "message": "File type is not a recognized image format"
              }
            }
          }
        }
      }
    },
    "/users/me/balance": {
      "get": {
        "summary": "Get user's DATA coin balance",
        "description": "Get user's DATA coin balance.",
        "parameters": [],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User's DATA coin balance",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Balance"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Balance": {
      "type": "object",
      "properties": {
        "sum": {
          "type": "integer",
          "description": "Sum of DATA coin balance.",
          "example": 100
        }
      }
    },
    "CreateDataUnionJoinRequest": {
      "type": "object",
      "required": [
        "memberAddress"
      ],
      "properties": {
        "memberAddress": {
          "type": "string",
          "description": "Ethereum address of the member to join"
        },
        "secret": {
          "type": "string",
          "description": "A secret shared by the data union. The join request is automatically accepted if a valid secret is provided."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": true,
          "description": "Application specific key-value pairs."
        }
      }
    },
    "UpdateDataUnionJoinRequest": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string",
          "description": "Join request state",
          "enum": [
            "pending",
            "accepted",
            "rejected"
          ]
        }
      }
    },
    "CreateDataUnionSecret": {
      "type": "object",
      "required": [
        "name",
        "secret"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Secret used in my app versions v1.0 - v1.2",
          "description": "Name of the data union secret"
        },
        "secret": {
          "type": "string",
          "example": "hunter2",
          "description": "Data union join requests containing this secret will be automatically accepted."
        }
      }
    },
    "DataUnionSecret": {
      "type": "object",
      "required": [
        "name",
        "secret"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "1234567",
          "description": "id of the secret"
        },
        "name": {
          "type": "string",
          "example": "Secret used in my app versions v1.0 - v1.2",
          "description": "Name of the data union secret"
        },
        "secret": {
          "type": "string",
          "example": "hunter2",
          "description": "Data union join requests containing this secret will be automatically accepted."
        },
        "contractAddress": {
          "type": "string",
          "example": "0x0000000000000000000000000000000000000001",
          "description": "Ethereum address of the data union smart contract"
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        }
      }
    },
    "Permission": {
      "type": "object",
      "required": [
        "user",
        "operation"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for this permission object",
          "example": 3
        },
        "user": {
          "type": "string",
          "description": "User who was granted the permission",
          "example": "new.user@gmail.com"
        },
        "operation": {
          "type": "string",
          "description": "User rights that this permission enables, e.g. 'product_get', 'product_edit', 'product_grant'",
          "example": "product_edit"
        }
      }
    },
    "CreateProduct": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of Product",
          "enum": [
            "NORMAL",
            "DATAUNION"
          ]
        },
        "name": {
          "type": "string",
          "example": "USD/ETH exchange rate"
        },
        "description": {
          "type": "string",
          "example": "Real-time USD/ETH exchange rate data aggregated from several cryptocurrency exchanges."
        },
        "category": {
          "type": "string",
          "description": "identifier of Category this Product belong to",
          "example": "cryptocurrencies-id"
        },
        "streams": {
          "type": "array",
          "description": "List of Stream identifiers that belong to this Product",
          "items": {
            "type": "string"
          },
          "example": [
            "stream-1-id",
            "stream-2-id",
            "stream-3-id"
          ]
        },
        "previewStreamId": {
          "type": "string",
          "description": "Identifier of Stream selected for preview",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF/abc"
        },
        "previewConfigJson": {
          "type": "string",
          "description": "Configuration of previewStream"
        },
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        },
        "contact": {
          "$ref": "#/definitions/ProductContact"
        },
        "termsOfUse": {
          "$ref": "#/definitions/ProductTermsOfUse"
        }
      }
    },
    "UpdateProduct": {
      "type": "object",
      "required": [
        "name",
        "description",
        "category",
        "streams",
        "ownerAddress",
        "beneficiaryAddress",
        "pricePerSecond",
        "priceCurrency",
        "minimumSubscriptionInSeconds"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "USD/ETH exchange rate"
        },
        "description": {
          "type": "string",
          "example": "Real-time USD/ETH exchange rate data aggregated from several cryptocurrency exchanges."
        },
        "category": {
          "type": "string",
          "description": "identifier of Category this Product belong to",
          "example": "cryptocurrencies-id"
        },
        "streams": {
          "type": "array",
          "description": "List of Stream identifiers that belong to this Product",
          "items": {
            "type": "string"
          },
          "example": [
            "stream-1-id",
            "stream-2-id",
            "stream-3-id"
          ]
        },
        "previewStream": {
          "type": "string",
          "description": "Identifier of Stream selected for preview",
          "example": "stream-2-id"
        },
        "previewConfigJson": {
          "type": "string",
          "description": "Configuration of previewStream"
        },
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        },
        "pendingChanges": {
          "type": "object",
          "description": "JSON Object of pending changes that are not published to blockchain",
          "example": "{\"ownerAddress\":\"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"}"
        },
        "contact": {
          "$ref": "#/definitions/ProductContact"
        },
        "termsOfUse": {
          "$ref": "#/definitions/ProductTermsOfUse"
        }
      }
    },
    "CreateSubscription": {
      "type": "object",
      "required": [
        "product",
        "endsAt"
      ],
      "properties": {
        "product": {
          "type": "string",
          "description": "Unique identifier of purchased Product",
          "example": "JaHJaXclSmuR7cvqwfj9MQD13crwwvRXCLJBWflaRPaQ"
        },
        "address": {
          "type": "string",
          "description": "Ethereum address of the buyer",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "endsAt": {
          "type": "integer",
          "description": "End time of purchased subscription (Unix time, seconds)",
          "example": 1520870998
        }
      }
    },
    "Product": {
      "type": "object",
      "required": [
        "id",
        "type",
        "state",
        "created",
        "updated",
        "owner",
        "imageUrl",
        "thumbnailUrl",
        "name",
        "description",
        "category",
        "ownerAddress",
        "beneficiaryAddress",
        "pricePerSecond",
        "priceCurrency",
        "minimumSubscriptionInSeconds"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier",
          "example": "11o6bc2HTs6W8oFRpMugmwTeodGTOxSzKQCIHeK_qDnA"
        },
        "type": {
          "type": "string",
          "description": "Type of Product",
          "enum": [
            "NORMAL",
            "DATAUNION"
          ]
        },
        "state": {
          "type": "string",
          "description": "State of Product",
          "enum": [
            "NOT_DEPLOYED",
            "DEPLOYING",
            "DEPLOYED",
            "UNDEPLOYING"
          ]
        },
        "created": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2018-02-21T12:26:18Z"
        },
        "updated": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2018-02-21T12:26:18Z"
        },
        "owner": {
          "type": "string",
          "description": "Username of the creator of this Product",
          "example": "John Doe"
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of image",
          "example": "http://www.google.com/a.jpg"
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "URL of thumbnail image",
          "example": "http://www.google.com/b.jpg"
        },
        "name": {
          "type": "string",
          "example": "USD/ETH exchange rate"
        },
        "description": {
          "type": "string",
          "example": "Real-time USD/ETH exchange rate data aggregated from several cryptocurrency exchanges."
        },
        "category": {
          "type": "string",
          "description": "identifier of Category this Product belong to",
          "example": "cryptocurrencies-id"
        },
        "previewStream": {
          "type": "string",
          "description": "Identifier of Stream selected for preview",
          "example": "stream-2-id"
        },
        "previewConfigJson": {
          "type": "string",
          "description": "Configuration of previewStream"
        },
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        },
        "pendingChanges": {
          "type": "string",
          "description": "Pending changes that are not published to blockchain",
          "example": "{\"ownerAddress\":\"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"}"
        },
        "contact": {
          "$ref": "#/definitions/ProductContact"
        },
        "termsOfUse": {
          "$ref": "#/definitions/ProductTermsOfUse"
        }
      }
    },
    "ProductContact": {
      "type": "object",
      "description": "Product's contact details",
      "properties": {
        "email": {
          "description": "Product's email addresss.",
          "type": "string",
          "maxLength": 255,
          "example": "firstname.lastname@streamr.network"
        },
        "url": {
          "description": "Product's url address for contact.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://streamr.network"
        },
        "social1": {
          "description": "Product's social media link 1.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://github.com/streamr-dev"
        },
        "social2": {
          "description": "Product's social media link 2.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://twitter.com/streamr"
        },
        "social3": {
          "description": "Product's social media link 3.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://www.youtube.com/channel/UCGWEA61RueG-9DV53s-ZyJQ"
        },
        "social4": {
          "description": "Product's social media link 4.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://medium.com/streamrblog"
        }
      }
    },
    "ProductTermsOfUse": {
      "type": "object",
      "description": "Product's legal terms of use.",
      "required": [
        "commercialUse",
        "redistribution",
        "reselling",
        "storage"
      ],
      "properties": {
        "commercialUse": {
          "description": "Terms of use for commercial use.",
          "type": "boolean",
          "default": true
        },
        "redistribution": {
          "description": "Terms of use for redistribution",
          "type": "boolean",
          "default": true
        },
        "reselling": {
          "description": "Terms of use for reselling.",
          "type": "boolean",
          "default": true
        },
        "storage": {
          "description": "Terms of use for storage.",
          "type": "boolean",
          "default": true
        },
        "termsName": {
          "description": "Name of the custom terms of use document's link.",
          "type": "string",
          "example": "Custom terms of use for Product by Company",
          "maxLength": 100
        },
        "termsUrl": {
          "description": "URL address for custom terms of use document.",
          "type": "string",
          "example": "https://streamr.network/termsofuse.html",
          "maxLength": 2048
        }
      }
    },
    "DeployedProduct": {
      "type": "object",
      "required": [
        "blockNumber",
        "blockIndex",
        "ownerAddress",
        "beneficiaryAddress",
        "pricePerSecond",
        "priceCurrency",
        "minimumSubscriptionInSeconds"
      ],
      "properties": {
        "blockNumber": {
          "type": "integer",
          "description": "Block number of associated Ethereum transaction",
          "example": 5137054
        },
        "blockIndex": {
          "type": "integer",
          "description": "Index of associated Ethereum transaction in block",
          "example": 5
        },
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        }
      }
    },
    "UndeployedProduct": {
      "type": "object",
      "required": [
        "blockNumber",
        "blockIndex"
      ],
      "properties": {
        "blockNumber": {
          "type": "integer",
          "description": "Block number of associated Ethereum transaction",
          "example": 5137054
        },
        "blockIndex": {
          "type": "integer",
          "description": "Index of associated Ethereum transaction in block",
          "example": 5
        }
      }
    },
    "Challenge": {
      "type": "object",
      "required": [
        "id",
        "challenge",
        "expires"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Challenge's  ID",
          "example": "NU1upjblRsexkPzZOmbBGA36MzNMxESIKLL4HRpOOBXQ"
        },
        "challenge": {
          "type": "string",
          "description": "Text to be signed by private key",
          "example": "This is a challenge created by Streamr to prove private key ownership by signing this random data with it\\n\\nNU1upjblRsexkPzZOmbBGA36MzNMxESIKLL4HRpOOBXQ"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "description": "date and time at which the challenge expires",
          "example": "2018-02-21T12:26:18Z"
        }
      }
    },
    "ChallengeResponse": {
      "type": "object",
      "required": [
        "challenge",
        "signature",
        "address"
      ],
      "properties": {
        "challenge": {
          "type": "object",
          "required": [
            "id",
            "challenge"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The challenge's ID",
              "example": "NU1upjblRsexkPzZOmbBGA36MzNMxESIKLL4HRpOOBXQ"
            },
            "challenge": {
              "type": "string",
              "description": "Text that must have been signed by the private key",
              "example": "This is a challenge created by Streamr to prove private key ownership by signing this random data with it\\n\\nNU1upjblRsexkPzZOmbBGA36MzNMxESIKLL4HRpOOBXQ"
            }
          }
        },
        "signature": {
          "type": "string",
          "description": "The signature of the challenge with an Ethereum private key",
          "example": "0x7b6de48393a030ade11168ab774b320ee63cb7e976152fc530bfbbad558dbe4c59bfc68391558fde58988054ec3149e0b41e30af549a974a2c7b93b7ec7430211b"
        },
        "address": {
          "type": "string",
          "description": "The Ethereum address corresponding to the public key",
          "example": "0xa50E97f6a98dD992D9eCb8207c2Aa58F54970729"
        }
      }
    },
    "SessionToken": {
      "type": "object",
      "required": [
        "token",
        "expires"
      ],
      "properties": {
        "token": {
          "type": "string",
          "description": "Session token to be used in Authorization header for every request",
          "example": "vavS7p5iJIwdYhDVhNXnYjSX5utoLU80adujGQcBID5m3e8b5TGE3Quy9s05NaV6"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "description": "date and time at which the session token expires",
          "example": "2018-10-12T17:34:40Z"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "name",
        "username"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "User's real name",
          "example": "John Smith"
        },
        "username": {
          "type": "string",
          "description": "The username (email address or Ethereum address)",
          "example": "someone@somewhere.com"
        },
        "imageUrlSmall": {
          "type": "string",
          "description": "URL of the user's avatar image (small)"
        },
        "imageUrlLarge": {
          "type": "string",
          "description": "URL of the user's avatar image (small)"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the user's previous login",
          "example": "2019-06-10T23:20:00Z"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "address",
        "endsAt",
        "product"
      ],
      "properties": {
        "address": {
          "type": "string",
          "description": "Ethereum address of subscriber",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "endsAt": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2020-02-21T12:26:18Z"
        },
        "dateCreated": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2018-02-21T12:26:18Z"
        },
        "lastUpdated": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2019-02-21T12:26:18Z"
        },
        "product": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code (e.g. \"NOT_FOUND\") for recognizing error type programmatically."
        },
        "message": {
          "type": "string",
          "description": "A human-readable message describing the error."
        }
      }
    }
  }
}
