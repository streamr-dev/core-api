{
  "swagger": "2.0",
  "info": {
    "title": "Streamr API",
    "version": "1.0.0"
  },
  "host": "www.streamr.com",
  "schemes": [
    "https"
  ],
  "basePath": "/api/v1",
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "token": []
    }
  ],
  "tags": [
    {
      "name": "categories",
      "description": "Product categories"
    },
    {
      "name": "canvases",
      "description": "Start, stop, and manage Canvases"
    },
    {
      "name": "dataunions",
      "description": "Data Unions"
    },
    {
      "name": "dashboards",
      "description": "Dashboards and their items"
    },
    {
      "name": "login",
      "description": "Methods for obtaining a session token for authentication"
    },
    {
      "name": "modules",
      "description": "Modules that are placed on canvases"
    },
    {
      "name": "permissions",
      "description": "Read, write, and share rights"
    },
    {
      "name": "products",
      "description": "Products sold on a marketplace containing Streams"
    },
    {
      "name": "streams",
      "description": "Manage Streams, and insert or read data from them"
    },
    {
      "name": "subscriptions",
      "description": "Subscriptions for Products purchased on the marketplace"
    },
    {
      "name": "users",
      "description": "User management"
    }
  ],
  "paths": {
    "/dataunions/{contractAddress}/joinRequests": {
      "get": {
        "summary": "List all join requests",
        "description": "List all join requests for this data union.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "enum": [
              "pending",
              "accepted",
              "rejected"
            ],
            "description": "Filter listing by state of the join request",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameter missing"
          }
        }
      },
      "post": {
        "summary": "Create join request",
        "description": "Create data union join request from given json body",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Data union join request details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDataUnionJoinRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "403": {
            "description": "Given secret is incorrect"
          },
          "404": {
            "description": "Member address is not owned by the current user"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/joinRequests/{joinRequestId}": {
      "get": {
        "summary": "Find join request by id",
        "description": "Find data union join request by join request id.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "joinRequestId",
            "in": "path",
            "description": "ID of the join request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Join request not found by id"
          }
        }
      },
      "put": {
        "summary": "Update join request state",
        "description": "Update state attribute of the join request.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "joinRequestId",
            "in": "path",
            "description": "ID of the join request",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Data union join request state",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDataUnionJoinRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Join request not found by id"
          }
        }
      },
      "delete": {
        "summary": "Delete join request",
        "description": "Delete data union join request.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "joinRequestId",
            "in": "path",
            "description": "ID of the join request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Join request not found by id"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/secrets": {
      "get": {
        "summary": "List all data union secrets",
        "description": "List all secrets for this data union.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          }
        }
      },
      "post": {
        "summary": "Create secret",
        "description": "Create data union secret",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Create data union secret details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDataUnionSecret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DataUnionSecret"
            }
          },
          "400": {
            "description": "Required parameters missing"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/secrets/{dataUnionSecretId}": {
      "get": {
        "summary": "Find secret by id",
        "description": "Find data union secret by id.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataUnionSecretId",
            "in": "path",
            "description": "ID of the data union secret",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DataUnionSecret"
            }
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Secret not found"
          }
        }
      },
      "put": {
        "summary": "Update secret",
        "description": "Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataUnionSecretId",
            "in": "path",
            "description": "ID of the secret",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated data union secret details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Renamed passphrase",
                  "description": "Name of the secret"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DataUnionSecret"
            }
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Secret not found"
          }
        }
      },
      "delete": {
        "summary": "Delete secret",
        "description": "Delete data union secret.",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataUnionSecretId",
            "in": "path",
            "description": "ID of the secret",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Secret not found by id"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/stats": {
      "get": {
        "summary": "Proxy calls to to data union server.",
        "description": "Return data union stats",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Stats not found by data union address"
          },
          "500": {
            "description": "Data union server is not responding"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/members": {
      "get": {
        "summary": "Proxy calls to to data union server.",
        "description": "Return a list of members",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Stats not found by data union address"
          },
          "500": {
            "description": "Data union server is not responding"
          }
        }
      }
    },
    "/dataunions/{contractAddress}/members/{memberAddress}": {
      "get": {
        "summary": "Proxy calls to to data union server.",
        "description": "Return stats for individual members",
        "tags": [
          "dataunions"
        ],
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "Ethereum address of the data union smart contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberAddress",
            "in": "path",
            "description": "Ethereum address of the member",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required parameters missing"
          },
          "404": {
            "description": "Stats not found by data union or member address"
          },
          "500": {
            "description": "Data union server is not responding"
          }
        }
      }
    },
    "/login/challenge/{address}": {
      "post": {
        "summary": "Generate challenge",
        "description": "Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.",
        "tags": [
          "login"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "description": "Public Ethereum address of the account for signature verification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A challenge and its expiration",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          }
        }
      }
    },
    "/login/response": {
      "post": {
        "summary": "Log in with challenge verification",
        "description": "Verifies a signature against a challenge. If it matches, generates a session token for the user.",
        "tags": [
          "login"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Challenge response",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A session token and its expiration",
            "schema": {
              "$ref": "#/definitions/SessionToken"
            }
          },
          "400": {
            "description": "Challenge-based login failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_CHALLENGE",
                "message": "Challenge-based login failed"
              }
            }
          }
        }
      }
    },
    "/login/password": {
      "post": {
        "summary": "Log in with password verification",
        "description": "Verifies a username/password combination. If correct, generates a session token for the user.",
        "tags": [
          "login"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Username and password combination",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsernamePassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A session token and its expiration",
            "schema": {
              "$ref": "#/definitions/SessionToken"
            }
          },
          "400": {
            "description": "Password-based login failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_USERNAME_OR_PASSWORD",
                "message": "Password-based login failed"
              }
            }
          }
        }
      }
    },
    "/login/apikey": {
      "post": {
        "summary": "Log in with API key verification",
        "description": "Verifies that an API key belongs to the user. If it does, generates a session token for the user.",
        "tags": [
          "login"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "API Key",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A session token and its expiration",
            "schema": {
              "$ref": "#/definitions/SessionToken"
            }
          },
          "400": {
            "description": "API key-based login failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_API_KEY",
                "message": "API key-based login failed"
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "List categories",
        "description": "Lists all categories in alphabetical order.",
        "tags": [
          "categories"
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "An array of categories",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "List products",
        "description": "Lists products according to provided parameters.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "name": "search",
            "type": "string",
            "in": "query",
            "description": "Filter by search term in name or description",
            "required": false
          },
          {
            "name": "sortBy",
            "type": "string",
            "in": "query",
            "description": "Sort the returned results by the given field.",
            "required": false,
            "default": "id"
          },
          {
            "name": "order",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "description": "Control whether the results are sorted in ascending or descending order. Used with parameter `sortBy`.",
            "required": false,
            "default": "asc"
          },
          {
            "name": "max",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of returned results (capped at 100)",
            "required": false,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "Skip the first (offset) results. Used together with max for paging.",
            "required": false,
            "default": 0
          },
          {
            "name": "grantedAccess",
            "type": "boolean",
            "in": "query",
            "description": "If false, excludes resources that user has been granted specific permission to from results.",
            "required": false,
            "default": true
          },
          {
            "name": "publicAccess",
            "type": "boolean",
            "in": "query",
            "description": "If true, includes publicly available resources in the results.",
            "required": false,
            "default": false
          },
          {
            "name": "operation",
            "type": "string",
            "enum": [
              "stream_get",
              "stream_edit",
              "stream_delete",
              "stream_publish",
              "stream_subscribe",
              "stream_share",
              "canvas_get",
              "canvas_edit",
              "canvas_delete",
              "canvas_startstop",
              "canvas_interact",
              "canvas_share",
              "dashboard_get",
              "dashboard_edit",
              "dashboard_delete",
              "dashboard_interact",
              "dashboard_share",
              "product_get",
              "product_edit",
              "product_delete",
              "product_share"
            ],
            "in": "query",
            "description": "Filter results by Permission (access level)",
            "required": false,
            "default": "product_get"
          },
          {
            "name": "categories",
            "type": "string",
            "in": "query",
            "description": "Filter products by category id(s)",
            "required": false
          },
          {
            "name": "states",
            "type": "string",
            "in": "query",
            "description": "Filter products by state(s)",
            "required": false,
            "enum": [
              "NOT_DEPLOYED",
              "DEPLOYING",
              "DEPLOYED",
              "UNDEPLOYING"
            ]
          },
          {
            "name": "minPrice",
            "type": "number",
            "in": "query",
            "description": "Minimum price (per second) of product",
            "required": false
          },
          {
            "name": "maxPrice",
            "type": "number",
            "in": "query",
            "description": "Maximum price (per second) of product",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Product",
        "description": "Creates a new Product with state `NOT_DEPLOYED`.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "description": "Product object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to a included `Stream` (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "me@streamr.com does not have permission to share Stream (id bqO9tp3wQVCPbKh6elAFLw)"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Validation failed for fields: category (typeMismatch)"
              }
            }
          }
        }
      }
    },
    "/users/me/products": {
      "get": {
        "summary": "List my products",
        "description": "Lists products that current user has product_share permission on",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "name": "search",
            "type": "string",
            "in": "query",
            "description": "Filter by search term in name or description",
            "required": false
          },
          {
            "name": "sortBy",
            "type": "string",
            "in": "query",
            "description": "Sort the returned results by the given field.",
            "required": false,
            "default": "id"
          },
          {
            "name": "order",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "description": "Control whether the results are sorted in ascending or descending order. Used with parameter `sortBy`.",
            "required": false,
            "default": "asc"
          },
          {
            "name": "max",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of returned results (capped at 100)",
            "required": false,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "Skip the first (offset) results. Used together with max for paging.",
            "required": false,
            "default": 0
          },
          {
            "name": "grantedAccess",
            "type": "boolean",
            "in": "query",
            "description": "If false, excludes resources that user has been granted specific permission to from results.",
            "required": false,
            "default": true
          },
          {
            "name": "publicAccess",
            "type": "boolean",
            "in": "query",
            "description": "If true, includes publicly available resources in the results.",
            "required": false,
            "default": false
          },
          {
            "name": "categories",
            "type": "string",
            "in": "query",
            "description": "Filter products by category id(s)",
            "required": false
          },
          {
            "name": "states",
            "type": "string",
            "in": "query",
            "description": "Filter products by state(s)",
            "required": false,
            "enum": [
              "NOT_DEPLOYED",
              "DEPLOYING",
              "DEPLOYED",
              "UNDEPLOYING"
            ]
          },
          {
            "name": "minPrice",
            "type": "number",
            "in": "query",
            "description": "Minimum price (per second) of product",
            "required": false
          },
          {
            "name": "maxPrice",
            "type": "number",
            "in": "query",
            "description": "Maximum price (per second) of product",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "summary": "Get a Product",
        "description": "Get a Product by id",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "403": {
            "description": "Insufficient permission to read Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to read Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Product",
        "description": "Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated Product. When performing on a paid Product with state `DEPLOYED` or a free Product, can leave out fields `ownerAddress`, `beneficiaryAddress`, `pricePerSecond`, `priceCurrency`, and `minimumSubscriptionInSeconds` since they are ignored anyway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to write Product or include Stream (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to write Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Validation failed for fields: category (typeMismatch)"
              }
            }
          }
        }
      }
    },
    "/products/{id}/streams": {
      "get": {
        "summary": "Get Streams of Product",
        "description": "Get all the Streams of a Product",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Streams",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Stream"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to read Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to read Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          }
        }
      }
    },
    "/products/{id}/streams/{streamId}": {
      "put": {
        "summary": "Add Stream to Product",
        "description": "Add a Stream to a Product",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "unique identifier of a Stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully added"
          },
          "403": {
            "description": "Insufficient permission to write Product or to share Stream (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to read Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product or Stream not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Stream from Product",
        "description": "Remove a Stream from a Product",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "unique identifier of a Stream",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed"
          },
          "403": {
            "description": "Insufficient permission to write Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to read Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product or Stream not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setDeploying": {
      "post": {
        "summary": "Transition Product to state DEPLOYING",
        "description": "Inform engine-and-editor that a Product has moved from state `NOT_DEPLOYED` to `DEPLOYING`. Should be called after transaction to submit product to marketplace has been sent to Ethereum.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`DEPLOYING`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to write Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to write Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition UNDEPLOYING -> DEPLOYING"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setDeployed": {
      "post": {
        "summary": "Transition Product to state DEPLOYED",
        "description": "Idempotent operation that informs engine-and-editor that a Product has moved from state `NOT_DEPLOYED` / `DEPLOYING` to `DEPLOYED`. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Deployed product and transaction block number information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeployedProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`DEPLOYED`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "User does not have DevOps privilege (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "DevOps role required"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition UNDEPLOYING -> DEPLOYED"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Validation failed for fields: blockNumber (nullable)"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setUndeploying": {
      "post": {
        "summary": "Transition Product to state UNDEPLOYING",
        "description": "Inform engine-and-editor that a Product has moved from state `DEPLOYED` to `UNDEPLOYING`. Should be called after transaction to remove product from marketplace has been sent to Ethereum.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`UNDEPLOYING`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to write Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to write Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition NOT_DEPLOYED -> UNDEPLOYING"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setUndeployed": {
      "post": {
        "summary": "Transition Product to state NOT_DEPLOYED",
        "description": "Idempotent operation that informs engine-and-editor that a Product has moved from state `DEPLOYED` / `UNDEPLOYING` to `NOT_DEPLOYED`. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Transaction block number information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UndeployedProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`NOT_DEPLOYED`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "User does not have DevOps privilege (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "DevOps role required"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition DEPLOYING -> NOT_DEPLOYED"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Validation failed for fields: blockNumber (nullable)"
              }
            }
          }
        }
      }
    },
    "/products/{id}/setPricing": {
      "post": {
        "summary": "Update Product pricing data",
        "description": "Idempotent operation that sets Product's pricing details (basically stuff held in smart contract).",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated product info and transaction block number",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeployedProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated product",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "User does not have DevOps privilege (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "DevOps role required"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Validation failed for fields: blockNumber (nullable)"
              }
            }
          }
        }
      }
    },
    "/products/{id}/deployFree": {
      "post": {
        "summary": "Deploy free Product",
        "description": "Deploy a free Product (price = 0) so that it is publicly viewable and purchasable. Its streams are made public as well.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`DEPLOYED`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to share Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to share Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition DEPLOYED -> DEPLOYED"
              }
            }
          }
        }
      }
    },
    "/products/{id}/undeployFree": {
      "post": {
        "summary": "Undeploy free Product",
        "description": "Undeploy a free Product (price = 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product with state=`NOT_DEPLOYED`",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to share Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to share Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "409": {
            "description": "Cannot move to this state from current state of Product (code: `INVALID_STATE_TRANSITION`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "INVALID_STATE_TRANSITION",
                "message": "Invalid transition NOT_DEPLOYED -> NOT_DEPLOYED"
              }
            }
          }
        }
      }
    },
    "/products/{id}/images": {
      "post": {
        "summary": "Attach image to Product",
        "description": "Upload and attach an image to a Product. Supported formats: JPG or PNG.",
        "tags": [
          "products"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "unique identifier of a Product",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "description": "Image file. JPG or PNG."
          }
        ],
        "responses": {
          "200": {
            "description": "Product with imageUrl updated",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Parameter 'file' missing or unexepcted image dimensions",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "UNEXPECTED_IMAGE_DIMENSIONS",
                "message": ""
              }
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "Insufficient permission to write Product (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "Non-authenticated user does not have permission to write Product (id aQAd59nDQHiCUpXnhm7-TwPLCh9ALaQH2TIxOengS1FQ)"
              }
            }
          },
          "404": {
            "description": "Product not found (code: `NOT_FOUND`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_FOUND",
                "message": "Product with id 1kDWMNstSmW1NxhJPYFHsAYgkesh19QraMLtgfuDs4sA not found"
              }
            }
          },
          "413": {
            "description": "Uploaded file too large",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FILE_TOO_LARGE",
                "message": "File size was 20000000 bytes (> 10000000 bytes)"
              }
            }
          },
          "415": {
            "description": "File type not supported. (Not an image or unrecognized)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "UNSUPPORTED_FILE_TYPE",
                "message": "File type is not a recognized image format"
              }
            }
          }
        }
      }
    },
    "/products/remove/{username}": {
      "delete": {
        "summary": "Remove troll users products",
        "description": "Removes users all products. Undo is not supported. Admin role is required.",
        "tags": [
          "products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "Username of the product owner",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Product's removed'",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Username is missing from the request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/streams": {
      "get": {
        "summary": "List streams",
        "description": "Lists the streams available to the user.\n",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Only return streams that exactly match the given name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "uiChannel",
            "in": "query",
            "description": "Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "noConfig",
            "in": "query",
            "description": "Remove config object from JSON response.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "search",
            "type": "string",
            "in": "query",
            "description": "Filter by search term in name or description",
            "required": false
          },
          {
            "name": "sortBy",
            "type": "string",
            "in": "query",
            "description": "Sort the returned results by the given field.",
            "required": false,
            "default": "id"
          },
          {
            "name": "order",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "description": "Control whether the results are sorted in ascending or descending order. Used with parameter `sortBy`.",
            "required": false,
            "default": "asc"
          },
          {
            "name": "max",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of returned results (capped at 100)",
            "required": false,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "Skip the first (offset) results. Used together with max for paging.",
            "required": false,
            "default": 0
          },
          {
            "name": "grantedAccess",
            "type": "boolean",
            "in": "query",
            "description": "If false, excludes resources that user has been granted specific permission to from results.",
            "required": false,
            "default": true
          },
          {
            "name": "publicAccess",
            "type": "boolean",
            "in": "query",
            "description": "If true, includes publicly available resources in the results.",
            "required": false,
            "default": false
          },
          {
            "name": "operation",
            "type": "string",
            "enum": [
              "stream_get",
              "stream_edit",
              "stream_delete",
              "stream_publish",
              "stream_subscribe",
              "stream_share"
            ],
            "in": "query",
            "description": "Filter results by Permission (access level)",
            "required": false,
            "default": "stream_get"
          }
        ],
        "tags": [
          "streams"
        ],
        "responses": {
          "200": {
            "description": "An array of streams",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Stream"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new stream",
        "description": "Creates a new stream.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Stream object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamCreateRequest"
            }
          }
        ],
        "tags": [
          "streams"
        ],
        "responses": {
          "200": {
            "description": "The stream that was created",
            "schema": {
              "$ref": "#/definitions/Stream"
            }
          },
          "400": {
            "description": "Duplicate stream id"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/streams/{id}": {
      "get": {
        "summary": "Get stream by id",
        "description": "Returns a stream by id",
        "tags": [
          "streams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream to be fetched (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stream"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a stream",
        "description": "Updates a stream.",
        "tags": [
          "streams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "StreamUpdateRequest object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stream"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a stream",
        "description": "Deletes a stream by id. This will also delete all data for this stream. Use with caution!",
        "tags": [
          "streams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success (no content)"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/streams/{id}/detectFields": {
      "post": {
        "summary": "Detect stream's field types.",
        "description": "Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "flatten",
            "description": "Flatten hierarchies.",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "streams"
        ],
        "responses": {
          "200": {
            "description": "Success. Contains details of the stream."
          },
          "403": {
            "description": "No permissions to stream"
          },
          "404": {
            "description": "Stream not found"
          },
          "500": {
            "description": "No fields found. If stream doesn't contain any data."
          }
        }
      },
      "get": {
        "summary": "Detect stream's field types.",
        "description": "Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "flatten",
            "description": "Flatten hierarchies.",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "streams"
        ],
        "responses": {
          "200": {
            "description": "Success. Contains details of the stream."
          },
          "403": {
            "description": "No permissions to stream"
          },
          "404": {
            "description": "Stream not found"
          },
          "500": {
            "description": "No fields found. If stream doesn't contain any data."
          }
        }
      }
    },
    "/streams/{id}/data": {
      "post": {
        "summary": "Add new event to stream",
        "description": "Add a new event to the stream identified by id. Requires a write permission on the stream.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ttl",
            "description": "Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default.",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "pkey",
            "description": "For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "signatureType",
            "description": "Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0.",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "address",
            "description": "Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "signature",
            "description": "If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the 'address' query parameter. This parameter is not needed if the signature type is 0.",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "streams"
        ],
        "responses": {
          "200": {
            "description": "Success (the response body is empty)"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Permission denied"
          },
          "403": {
            "description": "Authentication failed"
          },
          "404": {
            "description": "Stream not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/streams/{id}/data/partitions/{partition}/last": {
      "get": {
        "summary": "Get most recent events from a stream",
        "description": "Get the N most recent events from a stream.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "partition",
            "description": "Partition number",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "in": "query",
            "name": "count",
            "description": "Number of messages to fetch",
            "required": false,
            "type": "integer",
            "default": 1
          }
        ],
        "tags": [
          "streams"
        ],
        "responses": {
          "200": {
            "description": "A list of events"
          },
          "400": {
            "description": "Malformed request"
          },
          "401": {
            "description": "Permission denied"
          },
          "403": {
            "description": "Authentication failed"
          },
          "404": {
            "description": "Stream not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/streams/{id}/data/partitions/{partition}/range": {
      "get": {
        "summary": "Get events between a range from the stream",
        "description": "Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "partition",
            "description": "Partition number",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "in": "query",
            "name": "fromTimestamp",
            "description": "Timestamp lower bound in milliseconds since Jan 1st 1970 UTC",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "fromSequenceNumber",
            "description": "Sequence number lower bound of fromTimestamp",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "toTimestamp",
            "description": "Timestamp upper bound in milliseconds since Jan 1st 1970 UTC",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "toSequenceNumber",
            "description": "Sequence number upper bound of toTimestamp",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "publisherId",
            "description": "Id of the publisher of the two message references, in case sequence numbers are defined",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "streams"
        ],
        "responses": {
          "200": {
            "description": "A list of events"
          },
          "400": {
            "description": "Malformed request"
          },
          "401": {
            "description": "Permission denied"
          },
          "403": {
            "description": "Authentication failed"
          },
          "404": {
            "description": "Stream not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/streams/{id}/data/partitions/{partition}/from": {
      "get": {
        "summary": "Get events from a timestamp or reference from the stream",
        "description": "Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "partition",
            "description": "Partition number",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "in": "query",
            "name": "fromTimestamp",
            "description": "Timestamp lower bound in milliseconds since Jan 1st 1970 UTC",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "fromSequenceNumber",
            "description": "Sequence number lower bound of fromTimestamp",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "publisherId",
            "description": "Id of the publisher of the two message references, in case sequence numbers are defined",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "streams"
        ],
        "responses": {
          "200": {
            "description": "A list of events"
          },
          "400": {
            "description": "Malformed request"
          },
          "401": {
            "description": "Permission denied"
          },
          "403": {
            "description": "Authentication failed"
          },
          "404": {
            "description": "Stream not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/streams/{id}/permissions": {
      "get": {
        "summary": "List permissions",
        "description": "Lists the permissions to given stream.\n Requires 'share' permission or ownership.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "streams",
          "permissions"
        ],
        "responses": {
          "200": {
            "description": "An array of permission objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            }
          },
          "403": {
            "description": "No sharing rights to the stream",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Stream wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Grant permission",
        "description": "Grant a new permission to given stream.\n Requires 'share' permission or ownership.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Requested permission (id ignored)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          }
        ],
        "tags": [
          "streams",
          "permissions"
        ],
        "responses": {
          "200": {
            "description": "New stream permission object that was created",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          "403": {
            "description": "No sharing rights to the stream",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Stream wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/streams/{id}/permissions/{pid}": {
      "get": {
        "summary": "Get single permission object",
        "description": "Returns one stream-user-operation relationship object by its unique id. \n Requires 'share' permission or ownership.",
        "tags": [
          "streams",
          "permissions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pid",
            "description": "ID of the permission to be fetched",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          "403": {
            "description": "No sharing rights to the stream",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Stream or permission object wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a stream permission",
        "description": "Deletes a stream permission by id.\n Requires 'share' permission or ownership.",
        "tags": [
          "streams",
          "permissions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the stream",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pid",
            "description": "ID of the permission to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success (no content)"
          },
          "403": {
            "description": "No sharing rights to the stream",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Stream or permission wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
	"/storageNodes/{storageNodeAddress}/streams": {
		"get": {
			"summary": "Get streams by storage node",
			"parameters": [
				{
					"in": "path",
					"name": "storageNodeAddress",
					"required": true,
					"type": "string"
				}
			],
			"tags": ["streams"],
			"responses": {
				"200": {
					"description": "An array of streams",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/StreamSummary"
						}
					}
				},
				"500": {
					"description": "Unexpected error"
				}
			}
		}
	},
	"/streams/{streamId}/storageNodes": {
		"get": {
			"summary": "Get storage nodes by stream",
			"parameters": [
				{
					"in": "path",
					"name": "streamId",
					"description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
					"required": true,
					"type": "string"
				}
			],
			"tags": ["streams"],
			"responses": {
				"200": {
					"description": "An array of stream storage nodes",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/StreamStorageNode"
						}
					}
				},
				"404": {
					"description": "Stream not found"
				},
				"500": {
					"description": "Unexpected error"
				}
			}
		},
		"post": {
			"summary": "Create stream storage node",
			"tags": ["streams"],
			"parameters": [
				{
					"in": "path",
					"name": "streamId",
					"required": true,
					"type": "string"
				},
				{
					"name": "body",
					"in": "body",
					"description": "StorageNodeAddRequest object",
					"required": true,
					"schema": {
						"$ref": "#/definitions/StorageNodeAddRequest"
					}
				}
			],
			"responses": {
				"200": {
					"description": "Success"
				},
				"400": {
					"description": "Storage node already exists"
				},
				"422": {
					"description": "Validation error"
				},
				"401": {
					"description": "No authentication"
				},
				"403": {
					"description": "Authentication failed"
				}
			}
		}
	},
	"/streams/{streamId}/storageNodes/{storageNodeAddress}": {
		"delete": {
			"summary": "Delete stream storage node",
			"tags": ["streams"],
			"parameters": [
				{
					"in": "path",
					"name": "streamId",
					"description": "ID of the stream (NOTE: can contain slashes, must be url-encoded e.g. using encodeURIComponent())",
					"required": true,
					"type": "string"
				},
				{
					"in": "path",
					"name": "storageNodeAddress",
					"required": true,
					"type": "string"
				}
			],
			"responses": {
				"204": {
					"description": "Success"
				},
				"404": {
					"description": "Not found"
				},
				"401": {
					"description": "No authentication"
				},
				"403": {
					"description": "Authentication failed"
				}
			}
		}
    },
    "/subscriptions": {
      "get": {
        "summary": "Fetch subscriptions of user",
        "description": "Fetch a list of all the subscriptions of the authenticated user",
        "tags": [
          "subscriptions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "an array of subscriptions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Purchase free Product / Inform engine-and-editor of Product purchase",
        "description": "If not given field 'address', assumes user is purchasing a *free Product*. If field 'address' is given, is an idempotent operation that informs engine-and-editor that a *paid Product* has been purchased and is called by Marketplace Watcher. In both cases creates or updates an existing Subscription and related Permissions.",
        "tags": [
          "subscriptions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Information about Product purchase",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSubscription"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Not authenticated (code: `NOT_AUTHENTICATED`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "NOT_AUTHENTICATED",
                "message": "Not authenticated via token or cookie"
              }
            }
          },
          "403": {
            "description": "User does not have DevOps privilege (code: `FORBIDDEN`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FORBIDDEN",
                "message": "DevOps role required"
              }
            }
          },
          "422": {
            "description": "Body does not pass validation (code: `VALIDATION_ERROR`)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "VALIDATION_ERROR",
                "message": "Validation failed for fields: address"
              }
            }
          }
        }
      }
    },
    "/canvases": {
      "get": {
        "summary": "List canvases",
        "description": "Lists (and optionally filters) canvases in your archive.",
        "tags": [
          "canvases"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter results by canvas name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter results by canvas state.",
            "required": false,
            "type": "string"
          },
          {
            "name": "adhoc",
            "in": "query",
            "description": "Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "search",
            "type": "string",
            "in": "query",
            "description": "Filter by search term in name or description",
            "required": false
          },
          {
            "name": "sortBy",
            "type": "string",
            "in": "query",
            "description": "Sort the returned results by the given field.",
            "required": false,
            "default": "id"
          },
          {
            "name": "order",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "description": "Control whether the results are sorted in ascending or descending order. Used with parameter `sortBy`.",
            "required": false,
            "default": "asc"
          },
          {
            "name": "max",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of returned results (capped at 100)",
            "required": false,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "Skip the first (offset) results. Used together with max for paging.",
            "required": false,
            "default": 0
          },
          {
            "name": "grantedAccess",
            "type": "boolean",
            "in": "query",
            "description": "If false, excludes resources that user has been granted specific permission to from results.",
            "required": false,
            "default": true
          },
          {
            "name": "publicAccess",
            "type": "boolean",
            "in": "query",
            "description": "If true, includes publicly available resources in the results.",
            "required": false,
            "default": false
          },
          {
            "name": "operation",
            "type": "string",
            "enum": [
              "canvas_get",
              "canvas_edit",
              "canvas_delete",
              "canvas_startstop",
              "canvas_interact",
              "canvas_share"
            ],
            "in": "query",
            "description": "Filter results by Permission (access level)",
            "required": false,
            "default": "canvas_get"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of canvases",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Canvas"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a canvas",
        "description": "Creates a new canvas into your archive.",
        "tags": [
          "canvases"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Canvas object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CanvasCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The canvas that was created",
            "schema": {
              "$ref": "#/definitions/Canvas"
            }
          },
          "500": {
            "description": "Failed to construct Canvas",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/canvases/{id}": {
      "get": {
        "summary": "Get canvas by id",
        "description": "Returns a canvas by id",
        "tags": [
          "canvases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the canvas to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Canvas"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Failed to re-construct Canvas",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a canvas.",
        "description": "Updates a canvas. The *id* field can not be updated.",
        "tags": [
          "canvases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the canvas to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "New canvas details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CanvasCreateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success (no content)"
          },
          "403": {
            "description": "Not authorized to update canvas"
          },
          "404": {
            "description": "Canvas not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a canvas",
        "description": "Deletes a canvas by id",
        "tags": [
          "canvases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the canvas to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success (no content)"
          },
          "403": {
            "description": "Not authorized to delete canvas"
          },
          "404": {
            "description": "Canvas not found"
          }
        }
      }
    },
    "/canvases/{id}/start": {
      "post": {
        "summary": "Starts a canvas",
        "description": "Starts a canvas changing its state to 'running', or in the case of adhoc=true, creates a copy of the Canvas with state 'running'.",
        "tags": [
          "canvases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the live canvas to be started",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "runtime options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Canvas"
            }
          },
          "400": {
            "description": "Canvas is not properly configured"
          },
          "403": {
            "description": "Not authorized to start canvas"
          },
          "404": {
            "description": "Canvas not found"
          },
          "500": {
            "description": "Canvas already running"
          }
        }
      }
    },
    "/canvases/{id}/stop": {
      "post": {
        "summary": "Stop a currently running canvas.",
        "description": "Stops a canvas that is currently running.",
        "tags": [
          "canvases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the live canvas to be stopped",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Canvas"
            }
          },
          "204": {
            "description": "Success, and Canvas was set to delete on stop, and thus is was deleted"
          },
          "403": {
            "description": "Not allowed to stop canvas"
          },
          "404": {
            "description": "Canvas not found"
          },
          "500": {
            "description": "Canvas is not running"
          }
        }
      }
    },
    "/canvases/{id}/permissions": {
      "get": {
        "summary": "List permissions",
        "description": "Lists the permissions to given canvas.\n Requires 'share' permission or ownership.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the canvas",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "canvases",
          "permissions"
        ],
        "responses": {
          "200": {
            "description": "An array of permission objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            }
          },
          "403": {
            "description": "No sharing rights to the canvas",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Canvas wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Grant permission",
        "description": "Grant a new permission to given canvas.\n Requires 'share' permission or ownership.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the canvas",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Requested permission (id ignored)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          }
        ],
        "tags": [
          "canvases",
          "permissions"
        ],
        "responses": {
          "200": {
            "description": "New canvas permission object that was created",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          "403": {
            "description": "No sharing rights to the canvas",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Canvas wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/canvases/{id}/permissions/{pid}": {
      "get": {
        "summary": "Get single permission object",
        "description": "Returns one canvas-user-operation relationship object by its unique id. \n Requires 'share' permission or ownership.",
        "tags": [
          "canvases",
          "permissions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the canvas",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pid",
            "description": "ID of the permission to be fetched",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          "403": {
            "description": "No sharing rights to the canvas",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Canvas or permission object wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a canvas permission",
        "description": "Deletes a canvas permission by id.\n Requires 'share' permission or ownership.",
        "tags": [
          "canvases",
          "permissions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the canvas",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pid",
            "description": "ID of the permission to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success (no content)"
          },
          "403": {
            "description": "No sharing rights to the canvas",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Canvas or permission wasn't found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/canvases/downloadCsv": {
      "get": {
        "summary": "Download CSV file",
        "produces": [
          "text/csv"
        ],
        "description": "Prompts browser to open save file dialog and downloads CSV file.",
        "tags": [
          "canvases"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filename",
            "description": "Name of the file to download",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Filename parameter contains illegal characters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboards": {
      "get": {
        "summary": "List dashboards",
        "description": "Lists your dashboards",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Only return dashboards that exactly match the given name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "type": "string",
            "in": "query",
            "description": "Filter by search term in name or description",
            "required": false
          },
          {
            "name": "sortBy",
            "type": "string",
            "in": "query",
            "description": "Sort the returned results by the given field.",
            "required": false,
            "default": "id"
          },
          {
            "name": "order",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "description": "Control whether the results are sorted in ascending or descending order. Used with parameter `sortBy`.",
            "required": false,
            "default": "asc"
          },
          {
            "name": "max",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of returned results (capped at 100)",
            "required": false,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "Skip the first (offset) results. Used together with max for paging.",
            "required": false,
            "default": 0
          },
          {
            "name": "grantedAccess",
            "type": "boolean",
            "in": "query",
            "description": "If false, excludes resources that user has been granted specific permission to from results.",
            "required": false,
            "default": true
          },
          {
            "name": "publicAccess",
            "type": "boolean",
            "in": "query",
            "description": "If true, includes publicly available resources in the results.",
            "required": false,
            "default": false
          },
          {
            "name": "operation",
            "type": "string",
            "enum": [
              "dashboard_get",
              "dashboard_edit",
              "dashboard_delete",
              "dashboard_interact",
              "dashboard_share"
            ],
            "in": "query",
            "description": "Filter results by Permission (access level)",
            "required": false,
            "default": "dashboard_get"
          }
        ],
        "tags": [
          "dashboards"
        ],
        "responses": {
          "200": {
            "description": "an array of dashboards",
            "headers": {
              "Link": {
                "type": "string",
                "description": "a RFC5988 Link containing a URL for fetching more results"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DashboardSummary"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Dashboard",
        "description": "Creates a new empty Dashboard.",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Dashboard object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DashboardSaveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Dashboard that was created",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          },
          "422": {
            "description": "Request body did not pass validation",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboards/{id}": {
      "get": {
        "summary": "Get Dashboard",
        "description": "Get Dashboard by id",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Dashboard to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          },
          "403": {
            "description": "Not allowed to access Dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a Dashboard",
        "description": "Updates an existing Dashboard.",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Dashboard to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "New Dashboard details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DashboardSaveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          },
          "403": {
            "description": "Not allowed to update Dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Dashboard",
        "description": "Deletes a Dashboard by id",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Dashboard to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success (no content)"
          },
          "403": {
            "description": "Not allowed to delete Dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboards/{id}/items": {
      "get": {
        "summary": "List Items of Dashboard",
        "description": "Get Items of Dashboard by id",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Dashboard whose Items are to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DashboardItem"
              }
            }
          },
          "403": {
            "description": "Not allowed to access Dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Dashboard Item",
        "description": "Creates a new Dashboard Item associated with a Dashboard.",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the associated Dashboard",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Dashboard Item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveDashboardItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success ",
            "schema": {
              "$ref": "#/definitions/DashboardItem"
            }
          },
          "403": {
            "description": "Not allowed to add Item to Dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Dashboard not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Request body did not pass validation",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboards/{dashboardId}/items/{id}": {
      "get": {
        "summary": "Get Dashboard Item",
        "description": "Get Dashboard Item from associated Dashboard",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dashboardId",
            "description": "ID of the Dashboard",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Dashboard Item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "schema": {
              "$ref": "#/definitions/DashboardItem"
            }
          },
          "403": {
            "description": "Not allowed to access Dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Dashboard or Dashboard Item not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a Dashboard Item",
        "description": "Updates an existing Dashboard Item associated with a Dashboard",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dashboardId",
            "description": "ID of the Dashboard",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Dashboard Item",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "New Dashboard Item details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveDashboardItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DashboardItem"
            }
          },
          "403": {
            "description": "Not allowed to update Dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Dashboard or Dashboard Item not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Request body did not pass validation",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Dashboard Item",
        "description": "Deletes a Dashboard Item and disassociates it from its parent Dashboard",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dashboardId",
            "description": "ID of the Dashboard",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Dashboard Item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success (no content)"
          },
          "403": {
            "description": "Not allowed to delete item from Dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Dashboard or Dashboard Item not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get the authenticated user",
        "description": "Returns information on the authenticated user.",
        "parameters": [],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user profile",
        "description": "Updates user's profile.",
        "parameters": [],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "summary": "Delete user's profile",
        "description": "Delete user's profile.",
        "parameters": [],
        "tags": [
          "users"
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      }
    },
    "/users/me/image": {
      "post": {
        "summary": "Upload user's avatar image",
        "description": "Upload user's avatar image for the authenticated user.",
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "description": "Image file. JPG or PNG."
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Parameter 'file' missing or unexepcted image dimensions",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "UNEXPECTED_IMAGE_DIMENSIONS",
                "message": ""
              }
            }
          },
          "413": {
            "description": "Uploaded file too large",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "FILE_TOO_LARGE",
                "message": "File size was 20000000 bytes (> 10000000 bytes)"
              }
            }
          },
          "415": {
            "description": "File type not supported. (Not an image or unrecognized)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": "UNSUPPORTED_FILE_TYPE",
                "message": "File type is not a recognized image format"
              }
            }
          }
        }
      }
    },
    "/users/me/balance": {
      "get": {
        "summary": "Get user's DATA coin balance",
        "description": "Get user's DATA coin balance.",
        "parameters": [],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User's DATA coin balance",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Balance"
              }
            }
          }
        }
      }
    },
    "/modules/{id}": {
      "get": {
        "summary": "Get module configuration by id",
        "description": "Instantiate a fresh module by id and get its configuration",
        "tags": [
          "modules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the module",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Module"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Get module configuration by id",
        "description": "Instantiate a module (with pre-existing config) by id and get its configuration",
        "tags": [
          "modules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the module",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Module object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Module"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Module"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/module_categories": {
      "get": {
        "summary": "Get list of module categories and the modules within them",
        "description": "Get list of module categories and the modules within them",
        "tags": [
          "modules"
        ],
        "parameters": [
          {
            "name": "modulesFirst",
            "in": "query",
            "description": "Order list of children by modules first",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "definitions": {
    "Balance": {
      "type": "object",
      "properties": {
        "sum": {
          "type": "integer",
          "description": "Sum of DATA coin balance.",
          "example" : 100
        }
      }
    },
    "CreateDataUnionJoinRequest": {
      "type": "object",
      "required": [
        "memberAddress"
      ],
      "properties": {
        "memberAddress": {
          "type": "string",
          "description": "Ethereum address of the member to join"
        },
        "secret": {
          "type": "string",
          "description": "A secret shared by the data union. The join request is automatically accepted if a valid secret is provided."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": true,
          "description": "Application specific key-value pairs."
        }
      }
    },
    "UpdateDataUnionJoinRequest": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string",
          "description": "Join request state",
          "enum": [
            "pending",
            "accepted",
            "rejected"
          ]
        }
      }
    },
    "CreateDataUnionSecret": {
      "type": "object",
      "required": [
        "name",
        "secret"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Secret used in my app versions v1.0 - v1.2",
          "description": "Name of the data union secret"
        },
        "secret": {
          "type": "string",
          "example": "hunter2",
          "description": "Data union join requests containing this secret will be automatically accepted."
        }
      }
    },
    "DataUnionSecret": {
      "type": "object",
      "required": [
        "name",
        "secret"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "1234567",
          "description": "id of the secret"
        },
        "name": {
          "type": "string",
          "example": "Secret used in my app versions v1.0 - v1.2",
          "description": "Name of the data union secret"
        },
        "secret": {
          "type": "string",
          "example": "hunter2",
          "description": "Data union join requests containing this secret will be automatically accepted."
        },
        "contractAddress": {
          "type": "string",
          "example": "0x0000000000000000000000000000000000000001",
          "description": "Ethereum address of the data union smart contract"
        }
      }
    },
    "Stream": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for this stream.",
          "example": "ln2g8OKHSdr7BcL-rcnh2r"
        },
        "name": {
          "type": "string",
          "description": "Name of this stream.",
          "example": "My stream"
        },
        "description": {
          "type": "string",
          "description": "Description of this stream.",
          "example": "My stream description"
        },
        "config": {
          "$ref": "#/definitions/StreamConfig"
        },
        "uiChannel": {
          "type": "boolean",
          "description": "Indicates whether this stream is an UI channel: a stream used internally to push updates to UI widgets.",
          "example": false
        },
        "partitions": {
          "type": "integer",
          "description": "Number of partitions in this stream. Defaults to 1 (unpartitioned).",
          "example": 1
        },
        "requireSignedData": {
          "type": "boolean",
          "description": "If true, all messages in this stream must be cryptographically signed. Client's should not accept unsigned messages.",
          "example": false
        },
        "requireEncryptedData": {
          "type": "boolean",
          "description": "If true, all data in this stream must be encrypted.",
          "example": false
        },
        "dateCreated": {
          "type": "string",
          "description": "ISO-8601 timestamp of when stream was created.",
          "example": "2018-02-21T12:26:18Z"
        },
        "lastUpdated": {
          "type": "string",
          "description": "ISO-8601 timestamp of when stream details were updated.",
          "example": "2018-02-21T12:26:18Z"
        },
        "autoConfigure": {
          "type": "boolean",
          "description": "If true, always try to automatically configure field names and types.",
          "example": true
        },
        "storageDays": {
          "type": "integer",
          "description": "Historical data storage period (days)",
          "example": 365
        },
        "inactivityThresholdHours": {
          "type": "integer",
          "description": "Inactivity period for a stream in hours.",
          "example": 48
        }
      }
    },
    "StreamSummary": {
		"type": "object",
		"required": [
		  "name"
		],
		"properties": {
		  "id": {
			"type": "string",
			"description": "Unique identifier for this stream.",
			"example": "ln2g8OKHSdr7BcL-rcnh2r"
		  },
		  "name": {
			"type": "string",
			"description": "Name of this stream.",
			"example": "My stream"
		  },
		  "description": {
			"type": "string",
			"description": "Description of this stream.",
			"example": "My stream description"
		  },
		  "uiChannel": {
			"type": "boolean",
			"description": "Indicates whether this stream is an UI channel: a stream used internally to push updates to UI widgets.",
			"example": false
		  },
		  "partitions": {
			"type": "integer",
			"description": "Number of partitions in this stream. Defaults to 1 (unpartitioned).",
			"example": 1
		  },
		  "requireSignedData": {
			"type": "boolean",
			"description": "If true, all messages in this stream must be cryptographically signed. Client's should not accept unsigned messages.",
			"example": false
		  },
		  "requireEncryptedData": {
			"type": "boolean",
			"description": "If true, all data in this stream must be encrypted.",
			"example": false
		  },
		  "dateCreated": {
			"type": "string",
			"description": "ISO-8601 timestamp of when stream was created.",
			"example": "2018-02-21T12:26:18Z"
		  },
		  "lastUpdated": {
			"type": "string",
			"description": "ISO-8601 timestamp of when stream details were updated.",
			"example": "2018-02-21T12:26:18Z"
		  },
		  "storageDays": {
			"type": "integer",
			"description": "Historical data storage period (days)",
			"example": 365
		  }
		}
	  },
    "StreamCreateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of this stream.",
          "example": "sandbox/foo/bar"
        },
        "name": {
          "type": "string",
          "description": "Name of this stream.",
          "example": "My stream"
        },
        "description": {
          "type": "string",
          "description": "Description of this stream.",
          "example": "My stream description"
        },
        "config": {
          "$ref": "#/definitions/StreamConfig"
        },
        "partitions": {
          "type": "integer",
          "description": "Number of partitions in this stream. Defaults to 1 (unpartitioned).",
          "example": 1
        },
        "requireSignedData": {
          "type": "boolean",
          "description": "If true, all messages in this stream must be cryptographically signed. Client's should not accept unsigned messages.",
          "example": false
        },
        "requireEncryptedData": {
          "type": "boolean",
          "description": "If true, all data in this stream must be encrypted.",
          "example": false
        },
        "autoConfigure": {
          "type": "boolean",
          "description": "If true, always try to automatically configure field names and types.",
          "example": true
        },
        "storageDays": {
          "type": "integer",
          "description": "Historical data storage period (days)",
          "example": 365
        },
        "inactivityThresholdHours": {
          "type": "integer",
          "description": "Inactivity period for a stream in hours.",
          "example": 48
        }
      }
    },
    "StreamUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this stream.",
          "example": "My stream"
        },
        "description": {
          "type": "string",
          "description": "Description of this stream.",
          "example": "My stream description"
        },
        "config": {
          "$ref": "#/definitions/StreamConfig"
        },
        "partitions": {
          "type": "integer",
          "description": "Number of partitions in this stream. Defaults to 1 (unpartitioned).",
          "example": 1
        },
        "requireSignedData": {
          "type": "boolean",
          "description": "If true, all messages in this stream must be cryptographically signed. Client's should not accept unsigned messages.",
          "example": false
        },
        "requireEncryptedData": {
          "type": "boolean",
          "description": "If true, all data in this stream must be encrypted.",
          "example": false
        },
        "autoConfigure": {
          "type": "boolean",
          "description": "If true, always try to automatically configure field names and types.",
          "example": true
        },
        "storageDays": {
          "type": "integer",
          "description": "Historical data storage period (days)",
          "example": 365
        },
        "inactivityThresholdHours": {
          "type": "integer",
          "description": "Inactivity period for a stream in hours.",
          "example": 48
        }
      }
    },
    "StreamConfig": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "default": [],
          "description": "An array containing field definitions for this stream.",
          "items": {
            "$ref": "#/definitions/FieldDefinition"
          }
        }
      }
    },
    "FieldDefinition": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the field"
        },
        "type": {
          "type": "string",
          "description": "type of the field",
          "enum": [
            "number",
            "string",
            "boolean",
            "list",
            "map"
          ]
        }
      }
    },
    "Canvas": {
      "type": "object",
      "required": [
        "name",
        "modules"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for Canvas"
        },
        "name": {
          "type": "string",
          "example": "My canvas"
        },
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Module"
          }
        },
        "settings": {
          "$ref": "#/definitions/CanvasSettings"
        },
        "created": {
          "type": "string",
          "description": "when Canvas was created",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "description": "when Canvas was last updated",
          "format": "date-time"
        },
        "hasExports": {
          "type": "boolean",
          "description": "whether module uses exported inputs or outputs"
        },
        "uiChannel": {
          "$ref": "#/definitions/UiChannel"
        },
        "state": {
          "$ref": "#/definitions/CanvasState"
        },
        "adhoc": {
          "type": "boolean",
          "description": "adhoc canvases are temporary canvases used for eg. historical runs."
        },
        "serialized": {
          "type": "boolean",
          "description": "indicates whether there exists a serialization of this canvas"
        }
      }
    },
    "CanvasCreateRequest": {
      "type": "object",
      "required": [
        "name",
        "modules"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "My canvas"
        },
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Module"
          }
        },
        "settings": {
          "$ref": "#/definitions/CanvasSettings"
        }
      }
    },
    "CanvasState": {
      "type": "string",
      "enum": [
        "running",
        "stopped"
      ]
    },
    "CanvasSettings": {
      "type": "object",
      "properties": {
        "adhoc": {
          "type": "boolean",
          "description": "set to true for adhoc canvas"
        },
        "live": {
          "type": "boolean",
          "description": "set to true for live canvas (not historical)"
        },
        "speed": {
          "type": "string"
        },
        "beginDate": {
          "type": "string",
          "format": "date-time",
          "description": "begin date (historical mode) to start feeding from"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "end date (historical mode) to stop feeding at"
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        }
      }
    },
    "DashboardSaveRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name"
        }
      }
    },
    "DashboardSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "numOfItems": {
          "type": "integer",
          "description": "number of items contained in Dashboard"
        }
      }
    },
    "Dashboard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardItem"
          },
          "description": "items contained in Dashboard"
        }
      }
    },
    "SaveDashboardItemRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "title of item"
        },
        "ord": {
          "type": "integer",
          "description": "positive integer indicating order within Dashboard"
        },
        "size": {
          "type": "string",
          "description": "size of item on Dashboard",
          "enum": [
            "small",
            "medium",
            "large"
          ]
        },
        "uiChannelId": {
          "type": "string",
          "description": "id of the ui channel of this item"
        }
      }
    },
    "DashboardItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier of item"
        },
        "title": {
          "type": "string",
          "description": "title of item"
        },
        "ord": {
          "type": "integer",
          "description": "positive integer indicating order within Dashboard"
        },
        "size": {
          "type": "string",
          "description": "size of item on Dashboard",
          "enum": [
            "small",
            "medium",
            "large"
          ]
        },
        "uiChannelId": {
          "type": "string",
          "description": "id of the ui channel of this item"
        }
      }
    },
    "Module": {
      "type": "object"
    },
    "UiChannel": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "8YV4urkpTy6ZkrKqO_aDFw"
        },
        "name": {
          "type": "string",
          "example": "Notifications"
        }
      }
    },
    "StartRequest": {
      "type": "object",
      "properties": {
        "clearState": {
          "type": "boolean",
          "default": false,
          "example": true,
          "description": "If true, previously saved state will be cleared before starting canvas."
        }
      }
    },
    "Permission": {
      "type": "object",
      "required": [
        "user",
        "operation"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for this permission object",
          "example": "3"
        },
        "user": {
          "type": "string",
          "description": "User who was granted the permission",
          "example": "new.user@gmail.com"
        },
        "operation": {
          "type": "string",
          "description": "User rights that this permission enables, e.g. 'stream_get', 'product_edit', 'dashboard_share'",
          "example": "stream_edit"
        }
      }
    },
    "ProductWithoutBlockchain": {
      "type": "object",
      "required": [
        "name",
        "description",
        "category",
        "streams"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "USD/ETH exchange rate"
        },
        "description": {
          "type": "string",
          "example": "Real-time USD/ETH exchange rate data aggregated from several cryptocurrency exchanges."
        },
        "category": {
          "type": "string",
          "description": "identifier of Category this Product belong to",
          "example": "cryptocurrencies-id"
        },
        "streams": {
          "type": "array",
          "description": "List of Stream identifiers that belong to this Product",
          "items": {
            "type": "string"
          },
          "example": [
            "stream-1-id",
            "stream-2-id",
            "stream-3-id"
          ]
        },
        "previewStream": {
          "type": "string",
          "description": "Identifier of Stream selected for preview",
          "example": "stream-2-id"
        },
        "previewConfigJson": {
          "type": "string",
          "description": "Configuration of previewStream"
        }
      }
    },
    "ProductInBlockchain": {
      "type": "object",
      "required": [
        "ownerAddress",
        "beneficiaryAddress",
        "pricePerSecond",
        "priceCurrency",
        "minimumSubscriptionInSeconds"
      ],
      "properties": {
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        }
      }
    },
    "CreateProduct": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of Product",
          "enum": [
            "NORMAL",
            "DATAUNION"
          ]
        },
        "name": {
          "type": "string",
          "example": "USD/ETH exchange rate"
        },
        "description": {
          "type": "string",
          "example": "Real-time USD/ETH exchange rate data aggregated from several cryptocurrency exchanges."
        },
        "category": {
          "type": "string",
          "description": "identifier of Category this Product belong to",
          "example": "cryptocurrencies-id"
        },
        "streams": {
          "type": "array",
          "description": "List of Stream identifiers that belong to this Product",
          "items": {
            "type": "string"
          },
          "example": [
            "stream-1-id",
            "stream-2-id",
            "stream-3-id"
          ]
        },
        "previewStream": {
          "type": "string",
          "description": "Identifier of Stream selected for preview",
          "example": "stream-2-id"
        },
        "previewConfigJson": {
          "type": "string",
          "description": "Configuration of previewStream"
        },
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        },
        "contact": {
          "$ref": "#/definitions/ProductContact"
        },
        "termsOfUse": {
          "$ref": "#/definitions/ProductTermsOfUse"
        }
      }
    },
    "UpdateProduct": {
      "type": "object",
      "required": [
        "name",
        "description",
        "category",
        "streams",
        "ownerAddress",
        "beneficiaryAddress",
        "pricePerSecond",
        "priceCurrency",
        "minimumSubscriptionInSeconds"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "USD/ETH exchange rate"
        },
        "description": {
          "type": "string",
          "example": "Real-time USD/ETH exchange rate data aggregated from several cryptocurrency exchanges."
        },
        "category": {
          "type": "string",
          "description": "identifier of Category this Product belong to",
          "example": "cryptocurrencies-id"
        },
        "streams": {
          "type": "array",
          "description": "List of Stream identifiers that belong to this Product",
          "items": {
            "type": "string"
          },
          "example": [
            "stream-1-id",
            "stream-2-id",
            "stream-3-id"
          ]
        },
        "previewStream": {
          "type": "string",
          "description": "Identifier of Stream selected for preview",
          "example": "stream-2-id"
        },
        "previewConfigJson": {
          "type": "string",
          "description": "Configuration of previewStream"
        },
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        },
        "pendingChanges": {
          "type": "object",
          "description": "JSON Object of pending changes that are not published to blockchain",
          "example": "{\"ownerAddress\":\"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"}"
        },
        "contact": {
          "$ref": "#/definitions/ProductContact"
        },
        "termsOfUse": {
          "$ref": "#/definitions/ProductTermsOfUse"
        }
      }
    },
    "CreateSubscription": {
      "type": "object",
      "required": [
        "product",
        "endsAt"
      ],
      "properties": {
        "product": {
          "type": "string",
          "description": "Unique identifier of purchased Product",
          "example": "JaHJaXclSmuR7cvqwfj9MQD13crwwvRXCLJBWflaRPaQ"
        },
        "address": {
          "type": "string",
          "description": "Ethereum address of the buyer",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "endsAt": {
          "type": "integer",
          "description": "End time of purchased subscription (Unix time, seconds)",
          "example": 1520870998
        }
      }
    },
    "Product": {
      "type": "object",
      "required": [
        "id",
        "type",
        "state",
        "created",
        "updated",
        "owner",
        "imageUrl",
        "thumbnailUrl",
        "name",
        "description",
        "category",
        "streams",
        "ownerAddress",
        "beneficiaryAddress",
        "pricePerSecond",
        "priceCurrency",
        "minimumSubscriptionInSeconds"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier",
          "example": "11o6bc2HTs6W8oFRpMugmwTeodGTOxSzKQCIHeK_qDnA"
        },
        "type": {
          "type": "string",
          "description": "Type of Product",
          "enum": [
            "NORMAL",
            "DATAUNION"
          ]
        },
        "state": {
          "type": "string",
          "description": "State of Product",
          "enum": [
            "NOT_DEPLOYED",
            "DEPLOYING",
            "DEPLOYED",
            "UNDEPLOYING"
          ]
        },
        "created": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2018-02-21T12:26:18Z"
        },
        "updated": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2018-02-21T12:26:18Z"
        },
        "owner": {
          "type": "string",
          "description": "Username of the creator of this Product",
          "example": "John Doe"
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of image",
          "example": "http://www.google.com/a.jpg"
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "URL of thumbnail image",
          "example": "http://www.google.com/b.jpg"
        },
        "name": {
          "type": "string",
          "example": "USD/ETH exchange rate"
        },
        "description": {
          "type": "string",
          "example": "Real-time USD/ETH exchange rate data aggregated from several cryptocurrency exchanges."
        },
        "category": {
          "type": "string",
          "description": "identifier of Category this Product belong to",
          "example": "cryptocurrencies-id"
        },
        "streams": {
          "type": "array",
          "description": "List of Stream identifiers that belong to this Product",
          "items": {
            "type": "string"
          },
          "example": [
            "stream-1-id",
            "stream-2-id",
            "stream-3-id"
          ]
        },
        "previewStream": {
          "type": "string",
          "description": "Identifier of Stream selected for preview",
          "example": "stream-2-id"
        },
        "previewConfigJson": {
          "type": "string",
          "description": "Configuration of previewStream"
        },
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        },
        "pendingChanges": {
          "type": "string",
          "description": "Pending changes that are not published to blockchain",
          "example": "{\"ownerAddress\":\"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"}"
        },
        "contact": {
          "$ref": "#/definitions/ProductContact"
        },
        "termsOfUse": {
          "$ref": "#/definitions/ProductTermsOfUse"
        }
      }
    },
    "ProductContact": {
      "type": "object",
      "description": "Product's contact details",
      "properties": {
        "email": {
          "description": "Product's email addresss.",
          "type": "string",
          "maxLength": 255,
          "example": "firstname.lastname@streamr.network"
        },
        "url": {
          "description": "Product's url address for contact.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://streamr.network"
        },
        "social1": {
          "description": "Product's social media link 1.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://github.com/streamr-dev"
        },
        "social2": {
          "description": "Product's social media link 2.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://twitter.com/streamr"
        },
        "social3": {
          "description": "Product's social media link 3.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://www.youtube.com/channel/UCGWEA61RueG-9DV53s-ZyJQ"
        },
        "social4": {
          "description": "Product's social media link 4.",
          "type": "string",
          "maxLength": 2048,
          "example": "https://medium.com/streamrblog"
        }
      }
    },
    "ProductTermsOfUse": {
      "type": "object",
      "description": "Product's legal terms of use.",
      "required": [
        "commercialUse",
        "redistribution",
        "reselling",
        "storage"
      ],
      "properties": {
        "commercialUse": {
          "description": "Terms of use for commercial use.",
          "type": "boolean",
          "default": true
        },
        "redistribution": {
          "description": "Terms of use for redistribution",
          "type": "boolean",
          "default": true
        },
        "reselling": {
          "description": "Terms of use for reselling.",
          "type": "boolean",
          "default": true
        },
        "storage": {
          "description": "Terms of use for storage.",
          "type": "boolean",
          "default": true
        },
        "termsName": {
          "description": "Name of the custom terms of use document's link.",
          "type": "string",
          "example": "Custom terms of use for Product by Company",
          "maxLength": 100
        },
        "termsUrl": {
          "description": "URL address for custom terms of use document.",
          "type": "string",
          "example": "https://streamr.network/termsofuse.html",
          "maxLength": 2048
        }
      }
    },
    "DeployedProduct": {
      "type": "object",
      "required": [
        "blockNumber",
        "blockIndex",
        "ownerAddress",
        "beneficiaryAddress",
        "pricePerSecond",
        "priceCurrency",
        "minimumSubscriptionInSeconds"
      ],
      "properties": {
        "blockNumber": {
          "type": "integer",
          "description": "Block number of associated Ethereum transaction",
          "example": 5137054
        },
        "blockIndex": {
          "type": "integer",
          "description": "Index of associated Ethereum transaction in block",
          "example": 5
        },
        "ownerAddress": {
          "type": "string",
          "description": "Ethereum address of owner",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "beneficiaryAddress": {
          "type": "string",
          "description": "Ethereum address of beneficiary",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "pricePerSecond": {
          "type": "integer",
          "description": "Unit cost per second",
          "example": 5
        },
        "priceCurrency": {
          "type": "string",
          "description": "Unit currency",
          "enum": [
            "DATA",
            "USD"
          ]
        },
        "minimumSubscriptionInSeconds": {
          "type": "integer",
          "description": "Minimum subscription length (in seconds)"
        }
      }
    },
    "UndeployedProduct": {
      "type": "object",
      "required": [
        "blockNumber",
        "blockIndex"
      ],
      "properties": {
        "blockNumber": {
          "type": "integer",
          "description": "Block number of associated Ethereum transaction",
          "example": 5137054
        },
        "blockIndex": {
          "type": "integer",
          "description": "Index of associated Ethereum transaction in block",
          "example": 5
        }
      }
    },
    "Challenge": {
      "type": "object",
      "required": [
        "id",
        "challenge",
        "expires"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Challenge's  ID",
          "example": "NU1upjblRsexkPzZOmbBGA36MzNMxESIKLL4HRpOOBXQ"
        },
        "challenge": {
          "type": "string",
          "description": "Text to be signed by private key",
          "example": "This is a challenge created by Streamr to prove private key ownership by signing this random data with it\\n\\nNU1upjblRsexkPzZOmbBGA36MzNMxESIKLL4HRpOOBXQ"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "description": "date and time at which the challenge expires",
          "example": "2018-02-21T12:26:18Z"
        }
      }
    },
    "ChallengeResponse": {
      "type": "object",
      "required": [
        "challenge",
        "signature",
        "address"
      ],
      "properties": {
        "challenge": {
          "type": "object",
          "required": [
            "id",
            "challenge"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The challenge's ID",
              "example": "NU1upjblRsexkPzZOmbBGA36MzNMxESIKLL4HRpOOBXQ"
            },
            "challenge": {
              "type": "string",
              "description": "Text that must have been signed by the private key",
              "example": "This is a challenge created by Streamr to prove private key ownership by signing this random data with it\\n\\nNU1upjblRsexkPzZOmbBGA36MzNMxESIKLL4HRpOOBXQ"
            }
          }
        },
        "signature": {
          "type": "string",
          "description": "The signature of the challenge with an Ethereum private key",
          "example": "0x7b6de48393a030ade11168ab774b320ee63cb7e976152fc530bfbbad558dbe4c59bfc68391558fde58988054ec3149e0b41e30af549a974a2c7b93b7ec7430211b"
        },
        "address": {
          "type": "string",
          "description": "The Ethereum address corresponding to the public key",
          "example": "0xa50E97f6a98dD992D9eCb8207c2Aa58F54970729"
        }
      }
    },
    "UsernamePassword": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string",
          "description": "User's username",
          "example": "john123"
        },
        "password": {
          "type": "string",
          "description": "User's password",
          "example": "fjkn56fdjk23"
        }
      }
    },
    "APIKey": {
      "type": "object",
      "required": [
        "apiKey"
      ],
      "properties": {
        "apiKey": {
          "type": "string",
          "description": "User's API Key",
          "example": "QaSEO3mlSaTGd3ZOSnwHUgK3ecU7pOvQw-WPkZcR-6TBv"
        }
      }
    },
    "SessionToken": {
      "type": "object",
      "required": [
        "token",
        "expires"
      ],
      "properties": {
        "token": {
          "type": "string",
          "description": "Session token to be used in Authorization header for every request",
          "example": "vavS7p5iJIwdYhDVhNXnYjSX5utoLU80adujGQcBID5m3e8b5TGE3Quy9s05NaV6"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "description": "date and time at which the session token expires",
          "example": "2018-10-12T17:34:40Z"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "name",
        "username"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "User's real name",
          "example": "John Smith"
        },
        "username": {
          "type": "string",
          "description": "The username (email address or Ethereum address)",
          "example": "someone@somewhere.com"
        },
        "imageUrlSmall": {
          "type": "string",
          "description": "URL of the user's avatar image (small)"
        },
        "imageUrlLarge": {
          "type": "string",
          "description": "URL of the user's avatar image (small)"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the user's previous login",
          "example": "2019-06-10T23:20:00Z"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "address",
        "endsAt",
        "product"
      ],
      "properties": {
        "address": {
          "type": "string",
          "description": "Ethereum address of subscriber",
          "example": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        },
        "endsAt": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2020-02-21T12:26:18Z"
        },
        "dateCreated": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2018-02-21T12:26:18Z"
        },
        "lastUpdated": {
          "type": "string",
          "description": "ISO-8601 datetime",
          "example": "2019-02-21T12:26:18Z"
        },
        "product": {
          "$ref": "#/definitions/Product"
        }
      }
    },
	"StreamStorageNode": {
		"type": "object",
		"required": [
			"streamId",
			"storageNodeAddress",
			"dateCreated"
		],
		"properties": {
			"streamId": {
				"type": "string",
				"description": "Stream id"
			},
			"storageNodeAddress": {
				"type": "string",
				"description": "Ethereum address of the storage node",
				"example": "0x1234567890123456789012345678901234567890"
			},
			"dateCreated": {
				"type": "string",
				"description": "ISO-8601 datetime",
				"example": "2000-12-31T23:59:59Z"
			}

		}
	},
	"StorageNodeAddRequest": {
		"type": "object",
		"required": [
			"address"
		],
		"properties": {
			"address": {
				"type": "string",
				"description": "Ethereum address of the storage node",
				"example": "0x1234567890123456789012345678901234567890"
			}
		}
	},
    "Error": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code (e.g. \"NOT_FOUND\") for recognizing error type programmatically."
        },
        "message": {
          "type": "string",
          "description": "A human-readable message describing the error."
        }
      }
    }
  }
}
