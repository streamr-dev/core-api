name: Master

on:
  workflow_dispatch:
  pull_request: # TODO change to push
    paths-ignore:
      - '**.md'
      - 'docs/swagger.json'

env:
  GRAILS_WAR_ENV: 'test'
  GRAILS_VERSION: '2.5.6'
  JAVA_VERSION: '1.8'
  SDKMAN_JAVA_VERSION: '8.0.275-zulu'

jobs:

  test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: sdkman/sdkman-action@master
        id: sdkman-java
        with:
          candidate: java
          version: $SDKMAN_JAVA_VERSION
      - uses: actions/setup-java@v1.4.3
        id: setup-java
        with:
          java-version: $JAVA_VERSION
          jdkFile: ${{ steps.sdkman-java.outputs.file }}
      - uses: sdkman/sdkman-action@master
        id: sdkman-grails
        with:
          candidate: grails
          version: $GRAILS_VERSION
      - uses: actions/cache@v2.1.3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('grails-app/conf/BuildConfig.groovy') }}
          restore-keys: ${{ runner.os }}-maven
      - name: Install Grails
        run: |
          unzip ${{ steps.sdkman-grails.outputs.file }} -d "$HOME"
          echo "$HOME/grails-$GRAILS_VERSION/bin" >> $GITHUB_PATH
      - name: Build
        run: |
          make -f Makefile.ci compile
      - name: Unit Test
        run: |
          make -f Makefile.ci test-unit
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.2
        with:
          services-to-start: "mysql redis"
      - name: Integration test
        run: |
          make -f Makefile.ci test-integration

  e2e:
    name: End to end test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Login to DockerHub
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
        with:
          driver-opts: |
            network=host
      - name: Cache Docker layers
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build
        uses: docker/build-push-action@v2.2.2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: streamr/engine-and-editor:dev
          build-args: |
            GRAILS_WAR_ENV=${{ env.GRAILS_WAR_ENV }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.2
        with:
          services-to-start: "mysql redis cassandra parity-node0 parity-sidechain-node0 bridge data-union-server broker-node-storage-1 nginx smtp"
      - name: Set NODE_VERSION variable
        run: |
          echo "NODE_VERSION=$(cat rest-e2e-tests/.nvmrc | sed -e '/^v/ s/^v//')" >> $GITHUB_ENV
      - name: Install Node
        uses: actions/setup-node@v2.1.4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup End to End tests
        run: |
          streamr-docker-dev start engine-and-editor
          streamr-docker-dev wait
          cd rest-e2e-tests
          npm ci
      - name: Run End to End tests
        run: |
          cd rest-e2e-tests
          npm run test:e2e

  build-docker:
    name: Build Docker and push to Docker Hub
    needs:
      - test
#      - e2e TODO: Enable once AWS account is set
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1.11.0
        with:
          images: streamr/engine-and-editor
          tag-sha: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
        with:
          driver-opts: |
            network=host
      - name: Cache Docker layers
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2.2.2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          load: false
          build-args: |
            GRAILS_WAR_ENV=${{ env.GRAILS_WAR_ENV }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
