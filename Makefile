SHELL = /bin/bash
.SHELLFLAGS := -c # run 'bash -c /bin/cmd'
#.ONESHELL: ; # recipes execute in same shell
#.SILENT: ; # no need for @
#.NOTPARALLEL: ; # wait for this target to finish
#.EXPORT_ALL_VARIABLES: ; # send all vars to shell
.DEFAULT_GOAL := test-unit

# Testing recipes

.PHONY: test
test: test-unit test-integration test-rest ## Run unit, integration and REST API tests

.PHONY: test-unit
test-unit: ## Run unit tests
	grails test-app -unit --stacktrace

.PHONY: test-integration
test-integration: ## Run integration tests
	grails test-app -no-reports -integration --stacktrace --verbose

.PHONY: test-rest
test-rest: ## Run REST API tests
	. /usr/local/opt/nvm/nvm.sh && cd rest-e2e-tests && nvm use && npm test

# Development recipes

.PHONY: build-war-dev
build-war-dev: clean ## Build test war
	grails test war

.PHONY: compile
compile: ## Compile code
	grails compile

.PHONY: dependency-report
dependency-report: ## Generate Grails dependency report
	grails dependency-report | tee dependencies.txt

.PHONY: run-app-test
run-app-test: start ## Run Grails test app
	nohup grails test run-app --non-interactive &
	while true; do \
		http_code=$$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/v1/users/me); \
		if [ "$$http_code" -eq 401 ]; then \
			echo "run-app-test: engine up and running"; \
			break; \
		else \
		echo "run-app-test: engine not receiving connections"; \
		sleep 5; \
		fi; \
	done

.PHONY: run-app-dev
run-app-dev: ## Run Grails dev app
	grails dev run-app

.PHONY: factory-reset
factory-reset: ## Run streamr-docker-dev factory-reset and start
	streamr-docker-dev factory-reset
	streamr-docker-dev start --except engine-and-editor

.PHONY: wipe
wipe: ## Run streamr-docker-dev wipe and start
	streamr-docker-dev wipe
	streamr-docker-dev start --wait --except engine-and-editor

.PHONY: start
start: ## Run streamr-docker-dev start
	streamr-docker-dev start --wait --except engine-and-editor

.SILENT: db-diff
.ONESHELL: db-diff
.PHONY: db-diff
db-diff: ## Run Grails 'grails dbm-gorm-diff' with extras. WARNING! This command is destructive.
	echo "please enter a description of the change (no spaces, separated by - char, for example: mv-secuser-to-profile)"; \
	read -e description; \
	if [ -z "$$description" ]; then \
		echo "db-diff: description is required" 1>&2; \
		exit 1; \
	fi; \
	export migration_file="$$(date +%Y-%m-%d)-$$description.groovy"; \
	export migration_path="grails-app/migrations/core/$$migration_file"; \
	export changelog_path="grails-app/migrations/changelog.groovy"; \
	echo; \
	grails dbm-gorm-diff "core/$$migration_file" --add --stacktrace; \
	echo "package core" > "$$migration_path.new"; \
	cat "$$migration_path" >> "$$migration_path.new"; \
	mv "$$migration_path.new" "$$migration_path"; \
	sed -i '' -e '/^$$/d' "$$changelog_path" ; \
	sed -i '' \
		-e '/^$$/d' \
		-e 's/[[:space:]](generated)//' \
		"$$migration_path"; \
	sed -i '' \
		-E 's/^	changeSet\(author: "([a-zA-Z]+)", id: "[0-9]{13,14}-([0-9])"\) \{$$/	changeSet\(author: "\1", id: "'"$$description"'-\2"\) \{/g' \
		"$$migration_path"
# comments for sed scripts above per regex
# 1. remove empty lines
# 2. replace " (generated)" with ""
# 3. replace Grails generated numeric (len 13-14) changeset id with $DESCRIPTION

# db-diff TODO:
# Consider adding:
#	git add "$$migration_path" "$$changelog_path"
# ...to the end of the recipe, but how would db-diff-revert work then?

.PHONY: db-diff-revert
db-diff-revert: ## Remove files generated by db-diff. WARNING! This command is destructive.
	git clean -f grails-app/migrations/core
	git checkout grails-app/migrations/changelog.groovy

# Docker recipes

.PHONY: docker-build-dev
docker-build-dev: build-war-dev ## Build Docker dev container
	docker build -t streamr/engine-and-editor:dev .

.PHONY: docker-push-dev
docker-push-dev: docker-build-dev ## Push Docker dev container to registry
	docker push streamr/engine-and-editor:dev

.PHONY: docker-run-dev
docker-run-dev: ## Run Docker dev container locally
	docker run -i -t -d --rm -p 8081:8081/tcp streamr/engine-and-editor:dev

.PHONY: docker-login
docker-login: ## Login with Docker
	docker login -u DOCKER_USER -p DOCKER_PASS

# Auxiliary recipes

.PHONY: clean
clean: ## Clean generated files
	rm -rf tomcat.8081/work
	rm -rf target
	rm -rf .slcache
	rm -rf "$$HOME/.grails"
	grails clean-all

.PHONY: help
help: ## Show Help
	@grep -E '^[a-zA-Z_-]+%?:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "%-20s %s\n", $$1, $$2}'
