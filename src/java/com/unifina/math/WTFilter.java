package com.unifina.math;

import java.io.Serializable;

/**
 * Contains information for various wavelet filters.
 * Coefficients from http://www.musicdsp.org/showone.php?id=20
 * @author Henri
 */
public class WTFilter implements Serializable {

	double[] h;
	double[] g;
	int length;
	boolean modwt;
	
	public WTFilter(String name, boolean modwt, int level) {
		this.modwt = modwt;
		
		if (name.equals("haar")) {
			g = new double[] {
				7.071067811865475244008443621048490392848359376884740365883398e-01,
				7.071067811865475244008443621048490392848359376884740365883398e-01
			};
		}
		else if (name.equals("d4")) {
		    g = new double[] {
	    		 4.829629131445341433748715998644486838169524195042022752011715e-01,
	    		 8.365163037378079055752937809168732034593703883484392934953414e-01,
	    		 2.241438680420133810259727622404003554678835181842717613871683e-01,
	    		-1.294095225512603811744494188120241641745344506599652569070016e-01
		    };
		}
		else if (name.equals("d6")) {
		    g = new double[] {
	    		 3.326705529500826159985115891390056300129233992450683597084705e-01,
	    		 8.068915093110925764944936040887134905192973949948236181650920e-01,
	    		 4.598775021184915700951519421476167208081101774314923066433867e-01,
	    		-1.350110200102545886963899066993744805622198452237811919756862e-01,
	    		-8.544127388202666169281916918177331153619763898808662976351748e-02,
	    		 3.522629188570953660274066471551002932775838791743161039893406e-02
		    };
		}
		else if (name.equals("d8")) {
		    g = new double[] {
	    		 2.303778133088965008632911830440708500016152482483092977910968e-01,
	    		 7.148465705529156470899219552739926037076084010993081758450110e-01,
	    		 6.308807679298589078817163383006152202032229226771951174057473e-01,
	    		-2.798376941685985421141374718007538541198732022449175284003358e-02,
	    		-1.870348117190930840795706727890814195845441743745800912057770e-01,
	    		 3.084138183556076362721936253495905017031482172003403341821219e-02,
	    		 3.288301166688519973540751354924438866454194113754971259727278e-02,
	    		-1.059740178506903210488320852402722918109996490637641983484974e-02
		    };
		}
		else if (name.equals("d10")) {
		    g = new double[] {
	    		 1.601023979741929144807237480204207336505441246250578327725699e-01,
	    		 6.038292697971896705401193065250621075074221631016986987969283e-01,
	    		 7.243085284377729277280712441022186407687562182320073725767335e-01,
	    		 1.384281459013207315053971463390246973141057911739561022694652e-01,
	    		-2.422948870663820318625713794746163619914908080626185983913726e-01,
	    		-3.224486958463837464847975506213492831356498416379847225434268e-02,
	    		 7.757149384004571352313048938860181980623099452012527983210146e-02,
	    		-6.241490212798274274190519112920192970763557165687607323417435e-03,
	    		-1.258075199908199946850973993177579294920459162609785020169232e-02,
	    		 3.335725285473771277998183415817355747636524742305315099706428e-03
			    };
		}
		else if (name.equals("d20")) {
		    g = new double[] {
	    		 2.667005790055555358661744877130858277192498290851289932779975e-02,
	    		 1.881768000776914890208929736790939942702546758640393484348595e-01,
	    		 5.272011889317255864817448279595081924981402680840223445318549e-01,
	    		 6.884590394536035657418717825492358539771364042407339537279681e-01,
	    		 2.811723436605774607487269984455892876243888859026150413831543e-01,
	    		-2.498464243273153794161018979207791000564669737132073715013121e-01,
	    		-1.959462743773770435042992543190981318766776476382778474396781e-01,
	    		 1.273693403357932600826772332014009770786177480422245995563097e-01,
	    		 9.305736460357235116035228983545273226942917998946925868063974e-02,
	    		-7.139414716639708714533609307605064767292611983702150917523756e-02,
	    		-2.945753682187581285828323760141839199388200516064948779769654e-02,
	    		 3.321267405934100173976365318215912897978337413267096043323351e-02,
	    		 3.606553566956169655423291417133403299517350518618994762730612e-03,
	    		-1.073317548333057504431811410651364448111548781143923213370333e-02,
	    		 1.395351747052901165789318447957707567660542855688552426721117e-03,
	    		 1.992405295185056117158742242640643211762555365514105280067936e-03,
	    		-6.858566949597116265613709819265714196625043336786920516211903e-04,
	    		-1.164668551292854509514809710258991891527461854347597362819235e-04,
	    		 9.358867032006959133405013034222854399688456215297276443521873e-05,
	    		-1.326420289452124481243667531226683305749240960605829756400674e-05
			};
		}
		else if (name.equals("d30")) {
		    g = new double[] {
	    		 4.538537361578898881459394910211696346663671243788786997916513e-03,
	    		 4.674339489276627189170969334843575776579151700214943513113197e-02,
	    		 2.060238639869957315398915009476307219306138505641930902702047e-01,
	    		 4.926317717081396236067757074029946372617221565130932402160160e-01,
	    		 6.458131403574243581764209120106917996432608287494046181071489e-01,
	    		 3.390025354547315276912641143835773918756769491793554669336690e-01,
	    		-1.932041396091454287063990534321471746304090039142863827937754e-01,
	    		-2.888825965669656462484125009822332981311435630435342594971292e-01,
	    		 6.528295284877281692283107919869574882039174285596144125965101e-02,
	    		 1.901467140071229823484893116586020517959501258174336696878156e-01,
	    		-3.966617655579094448384366751896200668381742820683736805449745e-02,
	    		-1.111209360372316933656710324674058608858623762165914120505657e-01,
	    		 3.387714392350768620854817844433523770864744687411265369463195e-02,
	    		 5.478055058450761268913790312581879108609415997422768564244845e-02,
	    		-2.576700732843996258594525754269826392203641634825340138396836e-02,
	    		-2.081005016969308167788483424677000162054657951364899040996166e-02,
	    		 1.508391802783590236329274460170322736244892823305627716233968e-02,
	    		 5.101000360407543169708860185565314724801066527344222055526631e-03,
	    		-6.487734560315744995181683149218690816955845639388826407928967e-03,
	    		-2.417564907616242811667225326300179605229946995814535223329411e-04,
	    		 1.943323980382211541764912332541087441011424865579531401452302e-03,
	    		-3.734823541376169920098094213645414611387630968030256625740226e-04,
	    		-3.595652443624688121649620075909808858194202454084090305627480e-04,
	    		 1.558964899205997479471658241227108816255567059625495915228603e-04,
	    		 2.579269915531893680925862417616855912944042368767340709160119e-05,
	    		-2.813329626604781364755324777078478665791443876293788904267255e-05,
	    		 3.362987181737579803124845210420177472134846655864078187186304e-06,
	    		 1.811270407940577083768510912285841160577085925337507850590290e-06,
	    		-6.316882325881664421201597299517657654166137915121195510416641e-07,
	    		 6.133359913305752029056299460289788601989190450885396512173845e-08
			};
		}
		else throw new IllegalArgumentException("Unknown filter name: "+name);

		length = 4;
	    
	    if (modwt)
	    	for (int i=0;i<g.length;i++)
	    		g[i] = g[i] / Math.sqrt(2);
	    
	    h = qmf(g,true);
		
		if (level > 1) {
			double[][] hg = equivalent(h,g,level);
			h = hg[0];
			g = hg[1];
			length = h.length;
		}
	}
	
	public static double[] qmf(double[] x, boolean inverse) {
		int L = x.length;
		double[] y = new double[L];
		if (!inverse) {
			for (int l=0;l<L;l++)
				y[l] = Math.pow(-1, l+1) * x[L-1-l];
		}
		else {
			for (int l=0;l<L;l++)
				y[l] = Math.pow(-1, l) * x[L-1-l];
		}
		return y;
	}
	
	public static double[][] equivalent(double[] h, double[] g, int J) {
		int L = h.length;
		int lastL = L;
		double[] lastH = h;
		double[] lastG = g;
		
		for (int j=2;j<=J;j++) {
			int newL = ((int)Math.pow(2,j) - 1)*(L-1) + 1;
			double[] hj = new double[newL];
			double[] gj = new double[newL];

			for (int l=0; l<newL; l++) {
				int u = l;
				double gMult = (u>=L ? 0 : g[u]);
				double hjl = gMult * lastH[0];
				double gjl = gMult * lastG[0];
				
				for (int k=1; k<lastL; k++) {
					u -= 2;
					
					if (u<0 || u>=L)
						gMult = 0;
					else gMult = g[u];
					
					hjl = hjl + gMult * lastH[k];
					gjl = gjl + gMult * lastG[k];
				}
				
				hj[l] = hjl;
				gj[l] = gjl;
			}
			lastH = hj;
			lastG = gj;
			lastL = newL;
		}
		
		double[][] result = new double[2][];
		result[0] = lastH;
		result[1] = lastG;
		return result;
	}

	public double[] getH() {
		return h;
	}

	public void setH(double[] h) {
		this.h = h;
	}

	public double[] getG() {
		return g;
	}

	public void setG(double[] g) {
		this.g = g;
	}

	public int getLength() {
		return length;
	}

	public void setLength(int length) {
		this.length = length;
	}

	public boolean isModwt() {
		return modwt;
	}

	public void setModwt(boolean modwt) {
		this.modwt = modwt;
	}
}
